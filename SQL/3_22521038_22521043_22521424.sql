CREATE TYPE "seat_status" AS ENUM (
  'AVAILABLE',
  'BOOKED',
  'RESERVED'
);

CREATE TYPE "role_type" AS ENUM (
  'Employee',
  'Manager'
);

CREATE TYPE "seat_type" AS ENUM (
  'VIP',
  'Economy'
);

CREATE TYPE "gender" AS ENUM (
  'Male',
  'Female'
);

CREATE TABLE "Employee" (
  "EmployeeID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "Username" varchar,
  "Password" varchar,
  "Name" varchar(255),
  "Birthdate" date,
  "Gender" gender,
  "Address" varchar(255),
  "PhoneNumber" varchar(20),
  "IdentityCard" int UNIQUE,
  "Role" role_type
);

CREATE TABLE "TheaterRoom" (
  "TheaterRoomID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "RoomNumber" int,
  "SeatQuantity" int
);

CREATE TABLE "Movie" (
  "MovieID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "Title" varchar,
  "Author" varchar,
  "Poster" text,
  "Description" varchar,
  "Type" varchar,
  "Duration" float,
  "ReleaseDate" date,
  "Published" bool
);

CREATE TABLE "Showtime" (
  "ShowtimeID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "MovieID" int,
  "TheaterRoomID" int,
  "StartTime" timestamp,
  "EndTime" timestamp,
  "Price" money
);

CREATE TABLE "Ticket" (
  "TicketID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "ShowtimeSeatID" int,
  "SeatNumber" varchar,
  "BookingID" int,
  "Price" money
);

CREATE TABLE "Booking" (
  "BookingID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "VoucherID" int,
  "CustomerID" int,
  "EmployeeID" int,
  "ShowtimeID" int,
  "CreatedAt" timestamp,
  "TotalPrice" money,
  "FinalPrice" money
);

CREATE TABLE "Customer" (
  "CustomerID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "Name" varchar,
  "PhoneNumber" varchar
);

CREATE TABLE "Voucher" (
  "VoucherID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "Title" varchar,
  "Description" varchar,
  "ValidFrom" timestamp,
  "ValidTo" timestamp,
  "Discount" float,
  "IsUsed" bool
);

CREATE TABLE "Seat" (
  "SeatID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "TheaterRoomID" int,
  "SeatNumber" varchar,
  "Type" seat_type
);

CREATE TABLE "ShowtimeSeat" (
  "ShowtimeSeatID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "SeatID" int,
  "ShowtimeID" int,
  "SeatNumber" varchar,
  "Type" seat_type,
  "Status" seat_status
);

ALTER TABLE "Showtime" ADD FOREIGN KEY ("MovieID") REFERENCES "Movie" ("MovieID");

ALTER TABLE "Showtime" ADD FOREIGN KEY ("TheaterRoomID") REFERENCES "TheaterRoom" ("TheaterRoomID");

ALTER TABLE "Ticket" ADD FOREIGN KEY ("ShowtimeSeatID") REFERENCES "ShowtimeSeat" ("ShowtimeSeatID");

ALTER TABLE "Ticket" ADD FOREIGN KEY ("BookingID") REFERENCES "Booking" ("BookingID");

ALTER TABLE "Booking" ADD FOREIGN KEY ("VoucherID") REFERENCES "Voucher" ("VoucherID");

ALTER TABLE "Booking" ADD FOREIGN KEY ("CustomerID") REFERENCES "Customer" ("CustomerID");

ALTER TABLE "Booking" ADD FOREIGN KEY ("EmployeeID") REFERENCES "Employee" ("EmployeeID");

ALTER TABLE "Booking" ADD FOREIGN KEY ("ShowtimeID") REFERENCES "Showtime" ("ShowtimeID");

ALTER TABLE "Seat" ADD FOREIGN KEY ("TheaterRoomID") REFERENCES "TheaterRoom" ("TheaterRoomID");

ALTER TABLE "ShowtimeSeat" ADD FOREIGN KEY ("SeatID") REFERENCES "Seat" ("SeatID");

ALTER TABLE "ShowtimeSeat" ADD FOREIGN KEY ("ShowtimeID") REFERENCES "Showtime" ("ShowtimeID");


----------------------------------- II. THÊM RÀNG BUỘC ----------------------------------------------

ALTER TABLE "Employee"
ADD CONSTRAINT unique_username UNIQUE ("Username");

ALTER TABLE "Employee"
ADD CONSTRAINT unique_identity_card UNIQUE ("IdentityCard");

ALTER TABLE "TheaterRoom"
ADD CONSTRAINT unique_room_number UNIQUE ("RoomNumber");

ALTER TABLE "Movie"
ADD CONSTRAINT unique_movie_title UNIQUE ("Title");

ALTER TABLE "Showtime"
ADD CONSTRAINT unique_showtime_movie_room_time UNIQUE ("MovieID", "TheaterRoomID", "StartTime");

ALTER TABLE "Customer"
ADD CONSTRAINT unique_customer_phone UNIQUE ("PhoneNumber");

ALTER TABLE "Voucher"
ADD CONSTRAINT unique_voucher_title UNIQUE ("Title");

ALTER TABLE "Seat"
ADD CONSTRAINT unique_seat_room_number UNIQUE ("TheaterRoomID", "SeatNumber");

ALTER TABLE "Employee"
ADD CONSTRAINT valid_gender CHECK ("Gender" IN ('Male', 'Female'));

ALTER TABLE "Employee"
ADD CONSTRAINT valid_role CHECK ("Role" IN ('Employee', 'Manager'));

ALTER TABLE "Employee"
ADD CONSTRAINT check_username_not_empty CHECK (LENGTH("Username") > 0);

ALTER TABLE "Employee"
ADD CONSTRAINT check_password_not_empty CHECK (LENGTH("Password") > 0);

ALTER TABLE "Employee"
ADD CONSTRAINT check_name_not_empty CHECK (LENGTH("Name") > 0);

ALTER TABLE "Employee"
ADD CONSTRAINT check_address_not_empty CHECK (LENGTH("Address") > 0);

ALTER TABLE "Employee"
ADD CONSTRAINT check_phone_number_not_empty CHECK (LENGTH("PhoneNumber") > 0);

ALTER TABLE "Employee"
ADD CONSTRAINT check_birthdate_not_empty CHECK ("Birthdate" IS NOT NULL);

ALTER TABLE "Employee"
ADD CONSTRAINT check_identity_card_not_empty CHECK ("IdentityCard" IS NOT NULL);

ALTER TABLE "TheaterRoom"
ADD CONSTRAINT check_room_number_not_empty CHECK ("RoomNumber" IS NOT NULL);

ALTER TABLE "TheaterRoom"
ADD CONSTRAINT check_seat_quantity_not_empty CHECK ("SeatQuantity" IS NOT NULL);

ALTER TABLE "Movie"
ADD CONSTRAINT check_title_not_empty CHECK (LENGTH("Title") > 0);

ALTER TABLE "Movie"
ADD CONSTRAINT check_author_not_empty CHECK (LENGTH("Author") > 0);

ALTER TABLE "Movie"
ADD CONSTRAINT check_description_not_empty CHECK (LENGTH("Description") > 0);

ALTER TABLE "Movie"
ADD CONSTRAINT check_type_not_empty CHECK (LENGTH("Type") > 0);

ALTER TABLE "Movie"
ADD CONSTRAINT check_duration_not_empty CHECK ("Duration" IS NOT NULL);

ALTER TABLE "Movie"
ADD CONSTRAINT check_release_date_not_empty CHECK ("ReleaseDate" IS NOT NULL);

ALTER TABLE "Showtime"
ADD CONSTRAINT check_movie_id_not_empty CHECK ("MovieID" IS NOT NULL);

ALTER TABLE "Showtime"
ADD CONSTRAINT check_theater_room_id_not_empty CHECK ("TheaterRoomID" IS NOT NULL);

ALTER TABLE "Showtime"
ADD CONSTRAINT check_start_time_not_empty CHECK ("StartTime" IS NOT NULL);

ALTER TABLE "Showtime"
ADD CONSTRAINT check_end_time_not_empty CHECK ("EndTime" IS NOT NULL);

ALTER TABLE "Showtime"
ADD CONSTRAINT check_price_not_empty CHECK ("Price" IS NOT NULL);

ALTER TABLE "Ticket"
ADD CONSTRAINT check_seat_number_not_empty CHECK (LENGTH("SeatNumber") > 0);

ALTER TABLE "Ticket"
ADD CONSTRAINT check_showtime_seat_id_not_empty CHECK ("ShowtimeSeatID" IS NOT NULL);

ALTER TABLE "Ticket"
ADD CONSTRAINT check_booking_id_not_empty CHECK ("BookingID" IS NOT NULL);

ALTER TABLE "Ticket"
ADD CONSTRAINT check_ticket_price_not_empty CHECK ("Price" IS NOT NULL);

ALTER TABLE "Booking"
ADD CONSTRAINT "check_voucher_id_not_empty" CHECK ("VoucherID" IS NULL OR "VoucherID" >= 0);

ALTER TABLE "Booking"
ADD CONSTRAINT check_customer_id_not_empty CHECK ("CustomerID" IS NOT NULL);

ALTER TABLE "Booking"
ADD CONSTRAINT check_employee_id_not_empty CHECK ("EmployeeID" IS NOT NULL);

ALTER TABLE "Booking"
ADD CONSTRAINT check_showtime_id_not_empty CHECK ("ShowtimeID" IS NOT NULL);

ALTER TABLE "Booking"
ADD CONSTRAINT check_created_at_not_empty CHECK ("CreatedAt" IS NOT NULL);

ALTER TABLE "Booking"
ADD CONSTRAINT check_total_price_not_empty CHECK ("TotalPrice" IS NOT NULL);

ALTER TABLE "Booking"
ADD CONSTRAINT check_final_price_not_empty CHECK ("FinalPrice" IS NOT NULL);

ALTER TABLE "Customer"
ADD CONSTRAINT check_customer_name_not_empty CHECK (LENGTH("Name") > 0);

ALTER TABLE "Customer"
ADD CONSTRAINT check_customer_phone_number_not_empty CHECK (LENGTH("PhoneNumber") > 0);

ALTER TABLE "Voucher"
ADD CONSTRAINT check_voucher_title_not_empty CHECK (LENGTH("Title") > 0);

ALTER TABLE "Voucher"
ADD CONSTRAINT check_voucher_description_not_empty CHECK (LENGTH("Description") > 0);

ALTER TABLE "Voucher"
ADD CONSTRAINT check_valid_from_not_empty CHECK ("ValidFrom" IS NOT NULL);

ALTER TABLE "Voucher"
ADD CONSTRAINT check_valid_to_not_empty CHECK ("ValidTo" IS NOT NULL);

ALTER TABLE "Voucher"
ADD CONSTRAINT check_discount_not_empty CHECK ("Discount" IS NOT NULL);

ALTER TABLE "Voucher"
ADD CONSTRAINT check_is_used_not_empty CHECK ("IsUsed" IS NOT NULL);

ALTER TABLE "Seat"
ADD CONSTRAINT valid_seat_type CHECK ("Type" IN ('VIP', 'Economy'));

ALTER TABLE "Seat"
ADD CONSTRAINT check_seat_number_not_empty CHECK (LENGTH("SeatNumber") > 0);

ALTER TABLE "Seat"
ADD CONSTRAINT check_seat_room_id_not_empty CHECK ("TheaterRoomID" IS NOT NULL);

ALTER TABLE "ShowtimeSeat"
ADD CONSTRAINT check_seat_id_not_empty CHECK ("SeatID" IS NOT NULL);

ALTER TABLE "ShowtimeSeat"
ADD CONSTRAINT check_showtime_id_not_empty CHECK ("ShowtimeID" IS NOT NULL);

ALTER TABLE "ShowtimeSeat"
ADD CONSTRAINT check_seat_number_not_empty CHECK (LENGTH("SeatNumber") > 0);

ALTER TABLE "ShowtimeSeat"
ADD CONSTRAINT valid_seat_type CHECK ("Type" IN ('VIP', 'Economy'));

ALTER TABLE "ShowtimeSeat"
ADD CONSTRAINT valid_seat_status CHECK ("Status" IN ('AVAILABLE', 'BOOKED', 'RESERVED'));

---------------------------------------- III. THÊM DỮ LIỆU ----------------------------------------
-- Dữ liệu cho bảng Employee
INSERT INTO "Employee" ("Username", "Password", "Name", "Birthdate", "Gender", "Address", "PhoneNumber", "IdentityCard", "Role")
VALUES 
('jdoe', 'password123', 'John Doe', '1990-01-01', 'Male', '123 Main St', '123-456-7890', 123456789, 'Employee'),
('jsmith', 'password123', 'Jane Smith', '2002-02-02', 'Female', '456 Elm St', '987-654-3210', 987654321, 'Manager'),
('ajohnson', 'password123', 'Alice Johnson', '1992-03-03', 'Female', '789 Oak St', '555-123-4567', 555123456, 'Employee'),
('bbrown', 'password123', 'Bob Brown', '2000-04-04', 'Male', '321 Pine St', '444-987-6543', 444987654, 'Employee'),
('cdavis', 'password123', 'Charlie Davis', '1995-05-05', 'Male', '654 Maple St', '333-456-7890', 333456789, 'Employee'),
('dwhite', 'password123', 'Dana White', '2004-06-06', 'Female', '987 Cedar St', '222-987-6543', 222987654, 'Manager'),
('egreen', 'password123', 'Eve Green', '1991-07-07', 'Female', '159 Walnut St', '111-123-4567', 111123456, 'Employee'),
('fblack', 'password123', 'Frank Black', '2001-08-08', 'Male', '357 Birch St', '999-987-6543', 999987654, 'Employee'),
('glee', 'password123', 'Grace Lee', '1999-09-09', 'Female', '753 Spruce St', '888-456-7890', 888456789, 'Employee'),
('hkim', 'password123', 'Hank Kim', '1994-10-10', 'Male', '951 Ash St', '777-987-6543', 777987654, 'Employee'),
('iwilson', 'password123', 'Ivy Wilson', '2005-11-11', 'Female', '258 Chestnut St', '666-123-4567', 666123456, 'Employee'),
('jmartinez', 'password123', 'Jack Martinez', '1993-12-12', 'Male', '654 Redwood St', '555-987-6543', 555987654, 'Employee'),
('kclark', 'password123', 'Karen Clark', '1998-01-13', 'Female', '321 Willow St', '444-456-7890', 444456789, 'Manager'),
('llewis', 'password123', 'Liam Lewis', '1999-02-14', 'Male', '987 Fir St', '333-987-6543', 333987654, 'Employee'),
('mwalker', 'password123', 'Mia Walker', '1996-03-15', 'Female', '654 Palm St', '222-123-4567', 222123456, 'Employee'),
('nyoung', 'password123', 'Nina Young', '1990-04-16', 'Female', '321 Olive St', '111-987-6543', 111987654, 'Employee'),
('oallen', 'password123', 'Oscar Allen', '1991-05-17', 'Male', '987 Poplar St', '999-456-7890', 999456789, 'Employee'),
('pking', 'password123', 'Paul King', '2002-06-18', 'Male', '654 Bamboo St', '888-987-6543', 888987654, 'Employee'),
('qscott', 'password123', 'Quinn Scott', '1992-07-19', 'Female', '321 Sycamore St', '777-123-4567', 777123456, 'Employee'),
('rhill', 'password123', 'Rose Hill', '2003-08-20', 'Female', '987 Cypress St', '666-987-6543', 666987654, 'Employee');

-- Dữ liệu cho bảng TheaterRoom
INSERT INTO "TheaterRoom" ("RoomNumber", "SeatQuantity")
VALUES 
(1, 100),
(2, 120),
(3, 80),
(4, 150),
(5, 90),
(6, 110),
(7, 70),
(8, 130),
(9, 100),
(10, 120);

-- Dữ liệu cho bảng Movie
INSERT INTO "Movie" ("Title", "Author", "Poster", "Description", "Type", "Duration", "ReleaseDate", "Published")
VALUES 
('Barbie', 'Greta Gerwig', 'barbie_poster.jpg', 'A doll living in "Barbieland" is expelled for not being perfect enough and sets off on an adventure in the real world.', 'Comedy', 114.0, '2023-07-21', true),
('Oppenheimer', 'Christopher Nolan', 'oppenheimer_poster.jpg', 'The story of American scientist J. Robert Oppenheimer and his role in the development of the atomic bomb.', 'Biography', 180.0, '2023-07-21', true),
('Spider-Man: Across the Spider-Verse', 'Joaquim Dos Santos', 'spiderman_spiderverse_poster.jpg', 'Miles Morales catapults across the Multiverse, where he encounters a team of Spider-People charged with protecting its very existence.', 'Animation', 140.0, '2023-06-02', true),
('Guardians of the Galaxy Vol. 3', 'James Gunn', 'guardians_galaxy_vol3_poster.jpg', 'Still reeling from the loss of Gamora, Peter Quill rallies his team to defend the universe and one of their own.', 'Action', 150.0, '2023-05-05', true),
('The Flash', 'Andy Muschietti', 'the_flash_poster.jpg', 'Barry Allen uses his super speed to change the past, but his attempt to save his family creates a world without superheroes, forcing him to race for his life.', 'Action', 144.0, '2023-06-16', true),
('Mission: Impossible - Dead Reckoning Part One', 'Christopher McQuarrie', 'mission_impossible_dead_reckoning_poster.jpg', 'Ethan Hunt and his IMF team must track down a dangerous weapon before it falls into the wrong hands.', 'Action', 163.0, '2023-07-12', true),
('John Wick: Chapter 4', 'Chad Stahelski', 'john_wick_chapter4_poster.jpg', 'John Wick uncovers a path to defeating The High Table. But before he can earn his freedom, Wick must face off against a new enemy.', 'Action', 169.0, '2023-03-24', true),
('Dune: Part Two', 'Denis Villeneuve', 'dune_part_two_poster.jpg', 'Paul Atreides unites with Chani and the Fremen while seeking revenge against those who destroyed his family.', 'Sci-Fi', 155.0, '2024-03-15', true),
('Aquaman and the Lost Kingdom', 'James Wan', 'aquaman_lost_kingdom_poster.jpg', 'Arthur Curry, also known as Aquaman, is drawn into a quest to retrieve the mythical Trident of Poseidon.', 'Action', 145.0, '2023-12-20', true),
('The Marvels', 'Nia DaCosta', 'the_marvels_poster.jpg', 'Carol Danvers gets her powers entangled with those of Kamala Khan and Monica Rambeau, forcing them to work together.', 'Action', 132.0, '2023-11-10', true),
('Indiana Jones and the Dial of Destiny', 'James Mangold', 'indiana_jones_dial_destiny_poster.jpg', 'Archaeologist Indiana Jones races against time to retrieve a legendary artifact that can change the course of history.', 'Adventure', 142.0, '2023-06-30', true),
('Avatar: The Way of Water', 'James Cameron', 'avatar_way_of_water_poster.jpg', 'Jake Sully and Neytiri must leave their home and explore the regions of Pandora when an ancient threat resurfaces.', 'Sci-Fi', 192.0, '2023-12-16', true),
('The Little Mermaid', 'Rob Marshall', 'the_little_mermaid_poster.jpg', 'A young mermaid makes a deal with a sea witch to trade her beautiful voice for human legs so she can discover the world above water and impress a prince.', 'Fantasy', 135.0, '2023-05-26', true),
('Shazam! Fury of the Gods', 'David F. Sandberg', 'shazam_fury_of_gods_poster.jpg', 'The film continues the story of teenage Billy Batson who, upon reciting the magic word "SHAZAM!" is transformed into his adult Super Hero alter ego, Shazam.', 'Action', 130.0, '2023-03-17', true),
('Elemental', 'Peter Sohn', 'elemental_poster.jpg', 'In a city where fire, water, land, and air residents live together, a fiery young woman and a go-with-the-flow guy discover something elemental: how much they actually have in common.', 'Animation', 109.0, '2023-06-16', true),
('Wish', 'Chris Buck', 'wish_poster.jpg', 'A young girl makes a wish that brings together a variety of different characters and sends them on an epic adventure.', 'Animation', 102.0, '2023-11-22', true),
('Wonka', 'Paul King', 'wonka_poster.jpg', 'The story of a young Willy Wonka and his adventures prior to opening the world’s most famous chocolate factory.', 'Family', 116.0, '2023-12-15', true),
('Fast X', 'Louis Leterrier', 'fast_x_poster.jpg', 'Dom Toretto and his family are targeted by the vengeful son of drug kingpin Hernan Reyes.', 'Action', 142.0, '2023-05-19', true),
('Transformers: Rise of the Beasts', 'Steven Caple Jr.', 'transformers_rise_beasts_poster.jpg', 'During the 1990s, the Maximals, Predacons, and Terrorcons join the existing battle on Earth between the Autobots and Decepticons.', 'Action', 127.0, '2023-06-09', true),
('The Super Mario Bros. Movie', 'Aaron Horvath', 'super_mario_bros_poster.jpg', 'A plumber named Mario travels through an underground labyrinth with his brother, Luigi, trying to save a captured princess.', 'Animation', 92.0, '2023-04-07', true);

-- Dữ liệu cho bảng Showtime
INSERT INTO "Showtime" ("MovieID", "TheaterRoomID", "StartTime", "EndTime", "Price")
VALUES 
-- Suất chiếu cho ngày 11/06/2024
(8, 4, '2024-06-11 15:00:00', '2024-06-11 17:30:00', 10.00),
(8, 4, '2024-06-11 18:00:00', '2024-06-11 20:30:00', 11.00),
(9, 5, '2024-06-11 12:00:00', '2024-06-11 14:24:00', 10.00),
(9, 5, '2024-06-11 15:00:00', '2024-06-11 17:24:00', 12.00),
(10, 5, '2024-06-11 09:00:00', '2024-06-11 11:09:00', 12.00),
(10, 5, '2024-06-11 13:00:00', '2024-06-11 15:09:00', 12.00),
(10, 5, '2024-06-11 17:00:00', '2024-06-11 19:09:00', 12.00),
(11, 6, '2024-06-11 10:00:00', '2024-06-11 12:43:00', 10.00),
(11, 6, '2024-06-11 16:00:00', '2024-06-11 18:43:00', 10.00),
(12, 6, '2024-06-11 19:00:00', '2024-06-11 21:49:00', 14.00),
(13, 7, '2024-06-11 10:00:00', '2024-06-11 12:00:00', 12.00),
(14, 7, '2024-06-11 13:00:00', '2024-06-11 15:20:00', 13.00),
(15, 8, '2024-06-11 14:00:00', '2024-06-11 16:30:00', 10.00),
(16, 8, '2024-06-11 17:00:00', '2024-06-11 19:45:00', 11.00),
(17, 9, '2024-06-11 12:00:00', '2024-06-11 14:35:00', 13.00),
(17, 9, '2024-06-11 17:00:00', '2024-06-11 19:35:00', 13.00),

-- Suất chiếu cho ngày 12/06/2024
(1, 1, '2024-06-12 10:00:00', '2024-06-12 12:00:00', 10.00),
(3, 2, '2024-06-12 10:00:00', '2024-06-12 12:20:00', 11.00),
(5, 3, '2024-06-12 14:00:00', '2024-06-12 16:24:00', 15.00),
(7, 4, '2024-06-12 11:00:00', '2024-06-12 14:20:00', 13.00),
(9, 5, '2024-06-12 12:00:00', '2024-06-12 14:24:00', 11.00),
(11, 6, '2024-06-12 16:00:00', '2024-06-12 18:43:00', 10.00),
(13, 7, '2024-06-12 10:00:00', '2024-06-12 12:00:00', 12.00),
(15, 8, '2024-06-12 14:00:00', '2024-06-12 16:30:00', 10.00),
(17, 9, '2024-06-12 12:00:00', '2024-06-12 14:35:00', 13.00),
(19, 10, '2024-06-12 13:00:00', '2024-06-12 15:12:00', 10.00),

-- Suất chiếu cho ngày 13/06/2024
(2, 1, '2024-06-13 10:00:00', '2024-06-13 13:00:00', 12.00),
(2, 1, '2024-06-13 14:00:00', '2024-06-13 17:00:00', 12.00),
(4, 2, '2024-06-13 14:00:00', '2024-06-13 17:30:00', 10.00),
(4, 2, '2024-06-13 18:00:00', '2024-06-13 21:30:00', 10.00),
(6, 3, '2024-06-13 13:00:00', '2024-06-13 15:44:00', 14.00),
(6, 3, '2024-06-13 17:00:00', '2024-06-13 19:44:00', 14.00),
(8, 4, '2024-06-13 15:00:00', '2024-06-13 17:30:00', 10.00),
(8, 4, '2024-06-13 19:00:00', '2024-06-13 21:30:00', 10.00),
(10, 5, '2024-06-13 11:00:00', '2024-06-13 13:09:00', 12.00),
(10, 5, '2024-06-13 15:00:00', '2024-06-13 17:09:00', 12.00),
(12, 6, '2024-06-13 14:00:00', '2024-06-13 16:49:00', 14.00),
(12, 6, '2024-06-13 19:00:00', '2024-06-13 21:49:00', 14.00),
(14, 7, '2024-06-13 13:00:00', '2024-06-13 15:20:00', 13.00),
(14, 7, '2024-06-13 19:00:00', '2024-06-13 21:20:00', 13.00),
(16, 8, '2024-06-13 12:00:00', '2024-06-13 14:45:00', 11.00),
(16, 8, '2024-06-13 17:00:00', '2024-06-13 19:45:00', 11.00),
(18, 9, '2024-06-13 13:00:00', '2024-06-13 15:42:00', 14.00),
(18, 9, '2024-06-13 15:00:00', '2024-06-13 17:42:00', 14.00),
(20, 10, '2024-06-13 16:00:00', '2024-06-13 18:12:00', 12.00),
(20, 10, '2024-06-13 19:00:00', '2024-06-13 21:12:00', 12.00),
	
-- Suất chiếu cho ngày 14/06/2024
(10, 5, '2024-06-14 12:00:00', '2024-06-14 14:09:00', 12.00),
(10, 5, '2024-06-14 15:00:00', '2024-06-14 17:09:00', 12.00),
(11, 6, '2024-06-14 16:00:00', '2024-06-14 18:43:00', 10.00),
(12, 6, '2024-06-14 19:00:00', '2024-06-14 21:49:00', 14.00),
(13, 7, '2024-06-14 10:00:00', '2024-06-14 12:00:00', 12.00),
(14, 7, '2024-06-14 13:00:00', '2024-06-14 15:20:00', 13.00),
(15, 8, '2024-06-14 14:00:00', '2024-06-14 16:30:00', 10.00),
(16, 8, '2024-06-14 17:00:00', '2024-06-14 19:45:00', 11.00),
(17, 9, '2024-06-14 12:00:00', '2024-06-14 14:35:00', 13.00),
(18, 9, '2024-06-14 15:00:00', '2024-06-14 17:42:00', 14.00),
(19, 10, '2024-06-14 13:00:00', '2024-06-14 15:12:00', 10.00),
(20, 10, '2024-06-14 16:00:00', '2024-06-14 18:12:00', 12.00),

-- Suất chiếu cho ngày 15/06/2024
(1, 1, '2024-06-15 10:00:00', '2024-06-15 12:00:00', 10.00),
(2, 1, '2024-06-15 13:00:00', '2024-06-15 16:00:00', 12.00),
(3, 2, '2024-06-15 10:00:00', '2024-06-15 12:20:00', 11.00),
(4, 2, '2024-06-15 13:00:00', '2024-06-15 15:30:00', 10.00),
(5, 3, '2024-06-15 14:00:00', '2024-06-15 16:24:00', 15.00),
(6, 3, '2024-06-15 17:00:00', '2024-06-15 19:44:00', 14.00),
(7, 4, '2024-06-15 11:00:00', '2024-06-15 14:20:00', 13.00),
(8, 4, '2024-06-15 15:00:00', '2024-06-15 17:30:00', 10.00),
(9, 5, '2024-06-15 12:00:00', '2024-06-15 14:24:00', 11.00),
(10, 5, '2024-06-15 15:00:00', '2024-06-15 17:09:00', 12.00),
	
-- Suất chiếu cho ngày 16/06/2024
(1, 1, '2024-06-16 10:00:00', '2024-06-16 12:00:00', 10.00),
(2, 1, '2024-06-16 13:00:00', '2024-06-16 16:00:00', 12.00),
(3, 2, '2024-06-16 10:00:00', '2024-06-16 12:20:00', 11.00),
(4, 2, '2024-06-16 13:00:00', '2024-06-16 15:30:00', 10.00),
(5, 3, '2024-06-16 14:00:00', '2024-06-16 16:24:00', 15.00),
(6, 3, '2024-06-16 17:00:00', '2024-06-16 19:44:00', 14.00),
(7, 4, '2024-06-16 11:00:00', '2024-06-16 14:20:00', 13.00),
(8, 4, '2024-06-16 15:00:00', '2024-06-16 17:30:00', 10.00),
(9, 5, '2024-06-16 12:00:00', '2024-06-16 14:24:00', 11.00),
(10, 5, '2024-06-16 15:00:00', '2024-06-16 17:09:00', 12.00),
(11, 6, '2024-06-16 16:00:00', '2024-06-16 18:43:00', 10.00),
(12, 6, '2024-06-16 19:00:00', '2024-06-16 21:49:00', 14.00),
(13, 7, '2024-06-16 10:00:00', '2024-06-16 12:00:00', 12.00),
(14, 7, '2024-06-16 13:00:00', '2024-06-16 15:20:00', 13.00),
(15, 8, '2024-06-16 14:00:00', '2024-06-16 16:30:00', 10.00),
(16, 8, '2024-06-16 17:00:00', '2024-06-16 19:45:00', 11.00),
(17, 9, '2024-06-16 12:00:00', '2024-06-16 14:35:00', 13.00),
(18, 9, '2024-06-16 15:00:00', '2024-06-16 17:42:00', 14.00),
(19, 10, '2024-06-16 13:00:00', '2024-06-16 15:12:00', 10.00),
(20, 10, '2024-06-16 16:00:00', '2024-06-16 18:12:00', 12.00),

-- Suất chiếu cho ngày 17/06/2024
(1, 1, '2024-06-17 10:00:00', '2024-06-17 12:00:00', 10.00),
(2, 1, '2024-06-17 13:00:00', '2024-06-17 16:00:00', 12.00),
(3, 2, '2024-06-17 10:00:00', '2024-06-17 12:20:00', 11.00),
(4, 2, '2024-06-17 13:00:00', '2024-06-17 15:30:00', 10.00),
(5, 3, '2024-06-17 14:00:00', '2024-06-17 16:24:00', 15.00),
(6, 3, '2024-06-17 17:00:00', '2024-06-17 19:44:00', 14.00),
(7, 4, '2024-06-17 11:00:00', '2024-06-17 14:20:00', 13.00),
(8, 4, '2024-06-17 15:00:00', '2024-06-17 17:30:00', 10.00),
(9, 5, '2024-06-17 12:00:00', '2024-06-17 14:24:00', 11.00),
(10, 5, '2024-06-17 15:00:00', '2024-06-17 17:09:00', 12.00),
(11, 6, '2024-06-17 16:00:00', '2024-06-17 18:43:00', 10.00),
(12, 6, '2024-06-17 19:00:00', '2024-06-17 21:49:00', 14.00),
(13, 7, '2024-06-17 10:00:00', '2024-06-17 12:00:00', 12.00);

-- Dữ liệu cho bảng Customer
INSERT INTO "Customer" ("Name", "PhoneNumber")
VALUES 
('John Doe', '123-456-7890'),
('Jane Smith', '987-654-3210'),
('Alice Johnson', '555-123-4567'),
('Bob Brown', '444-987-6543'),
('Charlie Davis', '333-456-7890'),
('Dana White', '222-987-6543'),
('Eve Green', '111-123-4567'),
('Frank Black', '999-987-6543'),
('Grace Lee', '888-456-7890'),
('Hank Kim', '777-987-6543'),
('Ivy Wilson', '666-123-4567'),
('Jack Martinez', '555-987-6543'),
('Karen Clark', '444-456-7890'),
('Liam Lewis', '333-987-6543'),
('Mia Walker', '222-123-4567'),
('Nina Young', '111-987-6543'),
('Oscar Allen', '999-456-7890'),
('Paul King', '888-987-6543'),
('Quinn Scott', '777-123-4567'),
('Rose Hill', '666-987-6543');

-- Dữ liệu cho bảng Voucher
INSERT INTO "Voucher" ("Title", "Description", "ValidFrom", "ValidTo", "Discount", "IsUsed") 
VALUES 
('Summer Discount', 'Get 20% off on tickets', '2024-05-01', '2024-06-30', 0.2, false),
('Student Discount', 'Students get 10% off', '2024-01-01', '2024-12-31', 0.1, false),
('Early Bird Discount', 'Book in advance and save 15%', '2024-03-01', '2024-06-30', 0.15, false),
('Family Discount', 'Families get 25% off', '2024-01-01', '2024-12-31', 0.25, false),
('Senior Citizen Discount', 'Seniors get 30% off', '2024-01-01', '2024-12-31', 0.3, false);

-- Dữ liệu cho bảng Booking
INSERT INTO "Booking" ("VoucherID", "CustomerID", "EmployeeID", "ShowtimeID", "CreatedAt", "TotalPrice", "FinalPrice")
SELECT
    v."VoucherID",
    c."CustomerID",
    e."EmployeeID",
    s."ShowtimeID",
    CURRENT_TIMESTAMP,  -- Thời điểm tạo đơn đặt vé
    CASE
        WHEN v."VoucherID" IS NOT NULL THEN (s."Price" - (s."Price" * v."Discount"))  -- Giá vé sau khi áp dụng voucher
        ELSE s."Price"  -- Giá vé gốc nếu không áp dụng voucher
    END AS "TotalPrice",
    CASE
        WHEN v."VoucherID" IS NOT NULL THEN (s."Price" - (s."Price" * v."Discount"))  -- Giá vé sau khi áp dụng voucher
        ELSE s."Price"  -- Giá vé gốc nếu không áp dụng voucher
    END AS "FinalPrice"
FROM
    (SELECT * FROM "Customer" ORDER BY random() LIMIT 1) AS c,  -- Chọn ngẫu nhiên 1 khách hàng
    (SELECT * FROM "Employee" ORDER BY random() LIMIT 1) AS e,  -- Chọn ngẫu nhiên 1 nhân viên
    (SELECT * FROM "Showtime" WHERE "EndTime" > CURRENT_TIMESTAMP ORDER BY random() LIMIT 1) AS s  -- Chọn ngẫu nhiên 1 suất chiếu với thời điểm kết thúc lớn hơn thời điểm hiện tại
    LEFT JOIN (SELECT * FROM "Voucher" WHERE "ValidFrom" <= NOW() AND "ValidTo" >= NOW() AND "IsUsed" = FALSE ORDER BY random() LIMIT 1) AS v ON true;  -- Chọn ngẫu nhiên 1 voucher hợp lệ nếu có

-- Dữ liệu cho bảng Seat
INSERT INTO "Seat" ("TheaterRoomID", "SeatNumber", "Type")
SELECT
    tr."TheaterRoomID",
    CHR(64 + (s + 1) / 10) || ((s + 1) % 10)::TEXT,
    CASE 
        WHEN s < tr."SeatQuantity" / 2 THEN CAST('VIP' AS seat_type)
        ELSE CAST('Economy' AS seat_type)
    END
FROM
    "TheaterRoom" tr
CROSS JOIN
    generate_series(0, tr."SeatQuantity" - 1) s;

-- Dữ liệu cho bảng ShowtimeSeat
INSERT INTO "ShowtimeSeat" ("SeatID", "ShowtimeID", "SeatNumber", "Type", "Status")
SELECT
    s."SeatID",
    st."ShowtimeID",
    s."SeatNumber",
    s."Type",
    'AVAILABLE' -- Mặc định trạng thái của ghế là AVAILABLE
FROM
    "Seat" s
CROSS JOIN
    "Showtime" st;

-- Dữ liệu cho bảng Ticket
INSERT INTO "Ticket" ("ShowtimeSeatID", "SeatNumber", "BookingID", "Price")
SELECT
    ss."ShowtimeSeatID",
    ss."SeatNumber",
    b."BookingID",
    s."Price"
FROM
    "ShowtimeSeat" ss
JOIN
    "Booking" b ON ss."ShowtimeID" = b."ShowtimeID"
JOIN
    "Showtime" s ON s."ShowtimeID" = ss."ShowtimeID"
WHERE
    b."CreatedAt"::date = '2024-06-11'
LIMIT 50;

-- Generate data for Employee table
INSERT INTO "Employee" ("EmployeeID", "Username", "Password", "Name", "Birthdate", "Gender", "Address", "PhoneNumber", "IdentityCard", "Role")
SELECT
    generate_series(1, 100) AS "EmployeeID",
    'employee_' || generate_series(1, 100),
    'password_' || generate_series(1, 100),
    'Employee ' || generate_series(1, 100),
    (now() - interval '18 years')::date - (random() * (365 * 30))::int * '1 day'::interval,  -- Ensure age >= 18
    (CASE WHEN random() < 0.5 THEN 'Male' ELSE 'Female' END)::gender,
    '123 Main St, Anytown USA',
    '+1 (555) 123-' || lpad(generate_series(1, 100)::text, 4, '0'),
    generate_series(100001, 100100),
    (CASE WHEN random() < 0.5 THEN 'Employee' ELSE 'Manager' END)::role_type;

-- Generate data for TheaterRoom table
INSERT INTO "TheaterRoom" ("TheaterRoomID", "RoomNumber", "SeatQuantity")
SELECT
    generate_series(1, 10) AS "TheaterRoomID",
    generate_series(1, 10),
    100 + (random() * 50)::int;

-- Generate data for Movie table
INSERT INTO "Movie" ("MovieID", "Title", "Author", "Poster", "Description", "Type", "Duration", "ReleaseDate", "Published")
SELECT
    generate_series(1, 100) AS "MovieID",
    'Movie ' || generate_series(1, 100),
    'Author ' || generate_series(1, 100),
    'https://example.com/poster' || generate_series(1, 100) || '.jpg',
    'Description for Movie ' || generate_series(1, 100),
    (array['Drama', 'Comedy', 'Action', 'Sci-Fi'])[ceil(random() * 4)],
    90 + (random() * 90)::int,
    '2023-01-01'::date + (random() * (365 * 2)) * '1 day'::interval,
    random() < 0.8;

-- Generate data for Showtime table
INSERT INTO "Showtime" ("ShowtimeID", "MovieID", "TheaterRoomID", "StartTime", "EndTime", "Price")
SELECT
    generate_series(1, 100) AS "ShowtimeID",
    (SELECT "MovieID" FROM "Movie" ORDER BY random() LIMIT 1),  -- Chọn ngẫu nhiên một MovieID từ bảng Movie
    (SELECT "TheaterRoomID" FROM "TheaterRoom" ORDER BY random() LIMIT 1),  -- Chọn ngẫu nhiên một TheaterRoomID từ bảng TheaterRoom
    NOW() + (random() * (interval '6 months')),  -- StartTime từ hiện tại đến cuối năm
    NOW() + (random() * (interval '6 months')) + interval '2 hours',  -- EndTime từ hiện tại đến cuối năm + 2 hours
    10 + (random() * 50)::int;

-- Generate data for Customer table
INSERT INTO "Customer" ("Name", "PhoneNumber")
SELECT
    'Customer ' || generate_series(1, 500),
    '+1 (555) 987-' || lpad(generate_series(1, 500)::text, 4, '0');

-- Generate data for Voucher table
INSERT INTO "Voucher" ("Title", "Description", "ValidFrom", "ValidTo", "Discount", "IsUsed") 
VALUES 
('Summer Discount', 'Get 20% off on tickets', '2024-05-01', '2024-06-30', 0.2, false),
('Student Discount', 'Students get 10% off', '2024-01-01', '2024-12-31', 0.1, false),
('Early Bird Discount', 'Book in advance and save 15%', '2024-03-01', '2024-06-30', 0.15, false),
('Family Discount', 'Families get 25% off', '2024-01-01', '2024-12-31', 0.25, false),
('Senior Citizen Discount', 'Seniors get 30% off', '2024-01-01', '2024-12-31', 0.3, false);
	
-- Generate data for Seat table
INSERT INTO "Seat" ("TheaterRoomID", "SeatNumber", "Type")
SELECT
    tr."TheaterRoomID",
    CHR(64 + (s + 1) / 10) || ((s + 1) % 10)::TEXT,
    CASE 
        WHEN s < tr."SeatQuantity" / 2 THEN CAST('VIP' AS seat_type)
        ELSE CAST('Economy' AS seat_type)
    END
FROM
    "TheaterRoom" tr
CROSS JOIN
    generate_series(0, tr."SeatQuantity" - 1) s;

-- Generate data for ShowtimeSeat table
INSERT INTO "ShowtimeSeat" ("SeatID", "ShowtimeID", "SeatNumber", "Type", "Status")
SELECT
    s."SeatID",
    st."ShowtimeID",
    s."SeatNumber",
    s."Type",
    'AVAILABLE'  -- Mặc định trạng thái là AVAILABLE khi khởi tạo dữ liệu mới
FROM
    (SELECT *, ROW_NUMBER() OVER () AS row_num FROM "Seat") AS s
CROSS JOIN LATERAL
    (SELECT "ShowtimeID" FROM "Showtime" ORDER BY RANDOM() LIMIT 1) AS st;

-- Generate data for Booking table
INSERT INTO "Booking" ("VoucherID", "CustomerID", "EmployeeID", "ShowtimeID", "CreatedAt", "TotalPrice", "FinalPrice")
SELECT
    v."VoucherID",
    c."CustomerID",
    e."EmployeeID",
    s."ShowtimeID",
    NOW() + (random() * (DATE_TRUNC('year', NOW() + INTERVAL '1 year') - NOW())),  -- CreatedAt từ hiện tại đến cuối năm
    (random() * 200)::int + 50 AS "TotalPrice",
    CAST(
        LEAST(
            CAST((random() * 200)::int + 50 AS money),
            CAST((random() * 200)::int + 50 AS money) * (
                (SELECT "Discount" FROM "Voucher" WHERE "VoucherID" = v."VoucherID")
            )
        ) AS money
    ) AS "FinalPrice"
FROM (
    SELECT "VoucherID"
    FROM "Voucher"
    ORDER BY RANDOM()
    LIMIT 1000
) AS v
CROSS JOIN LATERAL (
    SELECT "ShowtimeID" 
    FROM "Showtime" 
    WHERE "EndTime" > NOW() 
    AND "ShowtimeID" NOT IN (SELECT "ShowtimeID" FROM "Booking")
    ORDER BY RANDOM() 
    LIMIT 1
) AS s
CROSS JOIN LATERAL (
    SELECT "CustomerID" 
    FROM "Customer" 
    ORDER BY RANDOM() 
    LIMIT 1
) AS c
CROSS JOIN LATERAL (
    SELECT "EmployeeID" 
    FROM "Employee" 
    ORDER BY RANDOM() 
    LIMIT 1
) AS e;

-- Generate data for Ticket table
INSERT INTO "Ticket" ("ShowtimeSeatID", "SeatNumber", "BookingID", "Price")
SELECT
    s."ShowtimeSeatID",
    'A' || lpad(generate_series(1, 100)::text, 2, '0'),
    b."BookingID",
    st."Price"
FROM 
    (SELECT "ShowtimeSeatID" FROM "ShowtimeSeat" ORDER BY RANDOM() LIMIT 1000) AS s
CROSS JOIN LATERAL (
    SELECT "BookingID" FROM "Booking" ORDER BY RANDOM() LIMIT 1
) AS b
CROSS JOIN LATERAL (
    SELECT "Price" FROM "Showtime" WHERE "ShowtimeID" = s."ShowtimeSeatID"
) AS st;

---------------------------------------- IV. TRIGGER ----------------------------------------
-- Trigger kiểm tra tính hợp lệ của khách hàng
CREATE OR REPLACE FUNCTION CheckTicketCustomerValidity() 
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN
        -- Thực hiện kiểm tra tính hợp lệ của khách hàng cho bảng Ticket tại đây
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER TicketCustomerValidityTrigger
BEFORE INSERT OR UPDATE OR DELETE
ON "Ticket"
FOR EACH ROW
EXECUTE FUNCTION CheckTicketCustomerValidity();

-- Trigger kiểm tra tính hợp lệ của nhân viên
CREATE OR REPLACE FUNCTION CheckCustomerValidity() 
RETURNS TRIGGER AS $$
BEGIN
    -- Kiểm tra tính hợp lệ của khách hàng khi có thao tác INSERT, UPDATE hoặc DELETE
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' OR TG_OP = 'DELETE' THEN
        IF TG_TABLE_NAME = 'Booking' THEN
            IF NOT EXISTS (
                SELECT 1 FROM "Customer" WHERE "CustomerID" = NEW."CustomerID"
            ) THEN
                RAISE EXCEPTION 'Khách hàng không hợp lệ.';
            END IF;
        ELSIF TG_TABLE_NAME = 'Ticket' THEN
            IF NOT EXISTS (
                SELECT 1 FROM "Booking" WHERE "BookingID" = NEW."BookingID"
            ) THEN
                RAISE EXCEPTION 'Đặt vé không hợp lệ.';
            END IF;
        END IF;
    END IF;

    -- Trả về NEW để cho phép thực hiện thao tác tiếp theo
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER EmployeeBookingCustomerValidityTrigger
BEFORE INSERT OR UPDATE OR DELETE
ON "Booking"
FOR EACH ROW
EXECUTE FUNCTION CheckCustomerValidity();

CREATE TRIGGER EmployeeTicketCustomerValidityTrigger
BEFORE INSERT OR UPDATE OR DELETE
ON "Ticket"
FOR EACH ROW
EXECUTE FUNCTION CheckCustomerValidity();

-- Trigger kiểm tra Số IdentityCard của nhân viên
CREATE OR REPLACE FUNCTION CheckEmployeeIdentityCardExistence() 
RETURNS TRIGGER AS $$
BEGIN
    -- Kiểm tra khi có thao tác INSERT hoặc UPDATE trên bảng "Employee"
    IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
        IF EXISTS (
            SELECT 1 FROM "Employee" WHERE "IdentityCard" = NEW."IdentityCard" AND "EmployeeID" <> NEW."EmployeeID"
        ) THEN
            RAISE EXCEPTION 'Số IdentityCard của nhân viên đã tồn tại.';
        END IF;
    END IF;

    -- Trả về NEW để cho phép thực hiện thao tác tiếp theo
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER EmployeeIdentityCardExistenceTrigger
BEFORE INSERT OR UPDATE
ON "Employee"
FOR EACH ROW
EXECUTE FUNCTION CheckEmployeeIdentityCardExistence();

-- Trigger kiểm tra tuổi của nhân viên
CREATE FUNCTION check_employee_age() RETURNS trigger AS $$
BEGIN
    IF (EXTRACT(YEAR FROM AGE(NEW."Birthdate")) < 18) THEN
        RAISE EXCEPTION 'Nhân viên phải đủ 18 tuổi trở lên';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER before_insert_or_update_employee
BEFORE INSERT OR UPDATE ON "Employee"
FOR EACH ROW
EXECUTE FUNCTION check_employee_age();

-- Trigger cập nhật trạng thái ghế khi đặt vé hoặc hoàn vé
CREATE FUNCTION update_seat_status() RETURNS trigger AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- Khi vé được đặt, cập nhật trạng thái ghế thành 'BOOKED'
        UPDATE "ShowtimeSeat"
        SET "Status" = 'BOOKED'
        WHERE "ShowtimeSeatID" = NEW."ShowtimeSeatID";
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        -- Khi vé bị hoàn, cập nhật trạng thái ghế thành 'AVAILABLE'
        UPDATE "ShowtimeSeat"
        SET "Status" = 'AVAILABLE'
        WHERE "ShowtimeSeatID" = OLD."ShowtimeSeatID";
        RETURN OLD;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_seat_status_trigger
AFTER INSERT OR DELETE ON "Ticket"
FOR EACH ROW
EXECUTE FUNCTION update_seat_status();

-- Trigger cập nhật trạng thái voucher khi đặt vé hoặc hoàn vé
CREATE FUNCTION update_voucher_status() RETURNS trigger AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- Khi đặt vé, cập nhật trạng thái voucher thành 'Đã sử dụng' nếu có voucher
        IF NEW."VoucherID" IS NOT NULL THEN
            UPDATE "Voucher"
            SET "IsUsed" = TRUE
            WHERE "VoucherID" = NEW."VoucherID";
        END IF;
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        -- Khi hoàn vé, cập nhật trạng thái voucher thành 'Chưa sử dụng' nếu có voucher
        IF OLD."VoucherID" IS NOT NULL THEN
            UPDATE "Voucher"
            SET "IsUsed" = FALSE
            WHERE "VoucherID" = OLD."VoucherID";
        END IF;
        RETURN OLD;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_voucher_status_trigger
AFTER INSERT OR DELETE ON "Booking"
FOR EACH ROW
EXECUTE FUNCTION update_voucher_status();

-- Trigger kiểm tra trạng thái ghế trước khi đặt vé
CREATE FUNCTION check_seat_status_before_booking() RETURNS trigger AS $$
DECLARE
    seat_status seat_status;
BEGIN
    -- Lấy trạng thái của ghế liên quan đến suất chiếu
    SELECT "Status" INTO seat_status
    FROM "ShowtimeSeat"
    WHERE "ShowtimeSeatID" = NEW."ShowtimeSeatID";
    
    -- Kiểm tra trạng thái của ghế
    IF seat_status IN ('BOOKED', 'RESERVED') THEN
        RAISE EXCEPTION 'Ghế đã được đặt hoặc giữ chỗ';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER before_insert_ticket_check_seat_status
BEFORE INSERT ON "Ticket"
FOR EACH ROW
EXECUTE FUNCTION check_seat_status_before_booking();

-- Trigger  
CREATE OR REPLACE FUNCTION check_voucher_availability()
RETURNS TRIGGER AS $$
DECLARE
    showtime_price DECIMAL;
    voucher_discount DECIMAL;
BEGIN
    IF NEW."VoucherID" IS NOT NULL THEN
        -- Lấy giá vé từ bảng Showtime
        SELECT "Price" INTO showtime_price
        FROM "Showtime"
        WHERE "ShowtimeID" = NEW."ShowtimeID";
        
        IF showtime_price IS NULL THEN
            RAISE EXCEPTION 'Showtime not found.';
        END IF;

        -- Lấy giảm giá từ bảng Voucher
        SELECT "Discount" INTO voucher_discount
        FROM "Voucher"
        WHERE "VoucherID" = NEW."VoucherID"
          AND "ValidFrom" <= NOW()
          AND "ValidTo" >= NOW()
          AND "IsUsed" = FALSE;

        IF voucher_discount IS NULL THEN
            RAISE EXCEPTION 'The voucher is either invalid, expired, or already used.';
        END IF;

        -- Tính toán giá vé cuối cùng sau khi áp dụng voucher
        NEW."TotalPrice" := showtime_price - (showtime_price * voucher_discount);
        NEW."FinalPrice" := NEW."TotalPrice";
    ELSE
        -- Nếu không sử dụng voucher, giữ nguyên giá vé
        SELECT "Price" INTO showtime_price
        FROM "Showtime"
        WHERE "ShowtimeID" = NEW."ShowtimeID";

        IF showtime_price IS NULL THEN
            RAISE EXCEPTION 'Showtime not found.';
        END IF;

        NEW."TotalPrice" := showtime_price;
        NEW."FinalPrice" := showtime_price;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER check_voucher_before_booking
BEFORE INSERT ON "Booking"
FOR EACH ROW
EXECUTE FUNCTION check_voucher_availability();

-- Trigger tự động cập nhật trạng thái của phim khi thêm hoặc xóa suất chiếu
CREATE FUNCTION update_movie_status_on_showtime_change() RETURNS trigger AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- Cập nhật trạng thái của phim thành 'Published' khi có suất chiếu mới
        UPDATE "Movie"
        SET "Published" = TRUE
        WHERE "MovieID" = NEW."MovieID";
    ELSIF TG_OP = 'DELETE' THEN
        -- Kiểm tra xem còn suất chiếu nào của phim không
        IF NOT EXISTS (SELECT * FROM "Showtime" WHERE "MovieID" = OLD."MovieID") THEN
            -- Nếu không còn suất chiếu nào, cập nhật trạng thái của phim thành 'Not Published'
            UPDATE "Movie"
            SET "Published" = FALSE
            WHERE "MovieID" = OLD."MovieID";
        END IF;
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER after_showtime_change_update_movie_status
AFTER INSERT OR DELETE ON "Showtime"
FOR EACH ROW
EXECUTE FUNCTION update_movie_status_on_showtime_change();

-- Trigger kiểm tra thời gian khi thêm hoặc cập nhật suất chiếu
CREATE OR REPLACE FUNCTION check_showtime_time() RETURNS TRIGGER AS $$
BEGIN
    IF NEW."StartTime" <= CURRENT_TIMESTAMP THEN
        -- Thời gian bắt đầu của suất chiếu nhỏ hơn hoặc bằng thời gian hiện tại
        RAISE EXCEPTION 'Thời gian bắt đầu của suất chiếu phải sau thời gian hiện tại';
    ELSIF NEW."StartTime" >= NEW."EndTime" THEN
        -- Thời gian bắt đầu của suất chiếu lớn hơn hoặc bằng thời gian kết thúc
        RAISE EXCEPTION 'Thời gian bắt đầu phải nhỏ hơn thời gian kết thúc';
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER before_insert_or_update_showtime_check_time
BEFORE INSERT OR UPDATE ON "Showtime"
FOR EACH ROW
EXECUTE FUNCTION check_showtime_time();

-- Trigger kiểm tra thời gian đặt vé
CREATE FUNCTION check_booking_time_vs_showtime() RETURNS trigger AS $$
DECLARE
    showtime_end_time timestamp;
BEGIN
    -- Lấy thời gian kết thúc của suất chiếu từ bảng Showtime
    SELECT "EndTime" INTO showtime_end_time
    FROM "Showtime"
    WHERE "ShowtimeID" = NEW."ShowtimeID";
    
    -- Kiểm tra xem thời điểm đặt vé có trước thời điểm kết thúc của suất chiếu không
    IF NEW."CreatedAt" > showtime_end_time THEN
        RAISE EXCEPTION 'Không thể đặt vé.';
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER before_insert_booking_check_time_vs_showtime
BEFORE INSERT ON "Booking"
FOR EACH ROW
EXECUTE FUNCTION check_booking_time_vs_showtime();

-- Trigger tự động cập nhật số lượng ghế còn trống trong phòng chiếu khi vé được đặt hoặc hủy thành công
CREATE OR REPLACE FUNCTION update_available_seats_count() RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- Giảm số lượng ghế còn trống khi có vé được đặt
        UPDATE "TheaterRoom"
        SET "SeatQuantity" = "SeatQuantity" - 1
        WHERE "TheaterRoomID" = (SELECT "TheaterRoomID" FROM "ShowtimeSeat" WHERE "ShowtimeSeatID" = NEW."ShowtimeSeatID");
    ELSIF TG_OP = 'DELETE' THEN
        -- Tăng số lượng ghế còn trống khi vé bị hủy thành công
        UPDATE "TheaterRoom"
        SET "SeatQuantity" = "SeatQuantity" + 1
        WHERE "TheaterRoomID" = (SELECT "TheaterRoomID" FROM "ShowtimeSeat" WHERE "ShowtimeSeatID" = OLD."ShowtimeSeatID");
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER after_successful_booking_update_available_seats_count
AFTER INSERT OR DELETE ON "Ticket"
FOR EACH ROW
EXECUTE FUNCTION update_available_seats_count();

-- Trigger kiểm tra số lượng vé bán ra số với số lượng ghế có trong phòng chiếu
CREATE OR REPLACE FUNCTION check_ticket_limit() RETURNS TRIGGER AS $$
DECLARE
    seat_count INT;
    sold_tickets_count INT;
BEGIN
    -- Lấy số lượng ghế có sẵn trong phòng chiếu từ ShowtimeSeat
    SELECT "SeatQuantity" INTO seat_count
    FROM "TheaterRoom"
    WHERE "TheaterRoomID" = (
        SELECT "TheaterRoomID"
        FROM "ShowtimeSeat"
        WHERE "ShowtimeSeatID" = NEW."ShowtimeSeatID" -- Assuming ShowtimeSeatID is related to ShowtimeID
    );

    -- Lấy số lượng vé đã bán ra cho suất chiếu này
    SELECT COUNT(*) INTO sold_tickets_count
    FROM "Ticket"
    WHERE "ShowtimeSeatID" = NEW."ShowtimeSeatID"; -- Assuming ShowtimeSeatID is related to ShowtimeID

    -- Kiểm tra nếu số lượng vé đã bán vượt quá số lượng ghế
    IF sold_tickets_count >= seat_count THEN
        RAISE EXCEPTION 'Số lượng vé đã bán vượt quá số lượng ghế có sẵn trong phòng chiếu!';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER check_ticket_limit_trigger
BEFORE INSERT ON "Ticket"
FOR EACH ROW EXECUTE FUNCTION check_ticket_limit();

---------------------------------------- V. STORED PROCEDURE ----------------------------------------
-- Procedure để đặt vé
CREATE OR REPLACE PROCEDURE book_movie_ticket(
    p_customer_id INT,
    p_showtime_id INT,
    p_seat_number VARCHAR,
    OUT p_booking_id INT,
    OUT p_success BOOLEAN
) AS
$$
DECLARE
    v_seat_status seat_status;
BEGIN
    -- Kiểm tra xem ghế có tồn tại và có trạng thái AVAILABLE không
    SELECT s."Status" 
    INTO v_seat_status
    FROM "ShowtimeSeat" s
    WHERE s."ShowtimeID" = p_showtime_id
    AND s."SeatNumber" = p_seat_number;

    IF NOT FOUND THEN
        RAISE NOTICE 'Ghế không tồn tại.';
        p_success := FALSE;
        RETURN;
    END IF;

    -- Kiểm tra xem ghế có trạng thái AVAILABLE không
    IF v_seat_status = 'BOOKED' THEN
        RAISE NOTICE 'Ghế đã được đặt bởi người khác.';
        p_success := FALSE;
        RETURN;
    END IF;

    -- Kiểm tra xem khách hàng đã đặt vé cho suất chiếu này trước đó chưa
    IF EXISTS (
        SELECT 1
        FROM "Booking" b
        WHERE b."ShowtimeID" = p_showtime_id
        AND b."CustomerID" = p_customer_id
    ) THEN
        RAISE NOTICE 'Khách hàng đã đặt vé cho suất chiếu này trước đó.';
        p_success := FALSE;
        RETURN;
    END IF;

    -- Đặt vé
    INSERT INTO "Booking" ("CustomerID", "ShowtimeID", "CreatedAt", "TotalPrice", "FinalPrice")
    VALUES (p_customer_id, p_showtime_id, CURRENT_TIMESTAMP, 0, 0)
    RETURNING "BookingID" INTO p_booking_id;

    IF p_booking_id IS NOT NULL THEN
        -- Cập nhật trạng thái ghế
        UPDATE "ShowtimeSeat"
        SET "Status" = 'BOOKED'
        WHERE "ShowtimeID" = p_showtime_id
        AND "SeatNumber" = p_seat_number;

        RAISE NOTICE 'Đặt vé thành công. Booking ID: %', p_booking_id;
        p_success := TRUE;
    ELSE
        RAISE NOTICE 'Lỗi không xác định.';
        p_success := FALSE;
    END IF;
END;
$$
LANGUAGE plpgsql;

-- Procedure để hủy vé đã đặt
CREATE OR REPLACE PROCEDURE CancelTicket(
    p_TicketID INT,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kiểm tra xem vé có tồn tại không
    IF NOT EXISTS (
        SELECT 1 FROM "Ticket" WHERE "TicketID" = p_TicketID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Vé không tồn tại.';
        RETURN;
    END IF;

    -- Xóa vé
    DELETE FROM "Ticket"
    WHERE "TicketID" = p_TicketID;

    p_Success := TRUE;
    p_Message := 'Vé đã được hủy thành công.';
EXCEPTION
    WHEN others THEN
        p_Success := FALSE;
        p_Message := 'Có lỗi xảy ra khi hủy vé.';
END;
$$;

-- Procedure để thay đổi giá vé
CREATE OR REPLACE PROCEDURE ChangeTicketPrice(
    IN p_ShowtimeID INT,
    IN p_NewPrice MONEY,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_ShowtimeExists BOOLEAN;
BEGIN
    -- Kiểm tra xem buổi chiếu tồn tại hay không
    SELECT EXISTS(SELECT 1 FROM "Showtime" WHERE "ShowtimeID" = p_ShowtimeID) INTO v_ShowtimeExists;

    IF NOT v_ShowtimeExists THEN
        p_Success := FALSE;
        p_Message := 'Buổi chiếu không tồn tại.';
        RETURN;
    END IF;

    -- Kiểm tra giá vé không âm
    IF p_NewPrice::NUMERIC < 0 THEN
        p_Success := FALSE;
        p_Message := 'Giá vé mới không hợp lệ.';
        RETURN;
    END IF;

    -- Cập nhật giá vé cho buổi chiếu
    UPDATE "Showtime"
    SET "Price" = p_NewPrice
    WHERE "ShowtimeID" = p_ShowtimeID;

    p_Success := TRUE;
    p_Message := 'Thay đổi giá vé thành công.';
END;
$$;

-- Procedure để thêm "Employee"
CREATE OR REPLACE PROCEDURE AddEmployee(
    IN p_Username VARCHAR,
    IN p_Password VARCHAR,
    IN p_Name VARCHAR(255),
    IN p_Birthdate DATE,
    IN p_Gender gender,
    IN p_Address VARCHAR(255),
    IN p_PhoneNumber VARCHAR(20),
    IN p_IdentityCard INT,
    IN p_Role role_type,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kiểm tra xem nhân viên đã tồn tại dựa trên số IdentityCard
    IF EXISTS (
        SELECT 1 FROM "Employee" WHERE "IdentityCard" = p_IdentityCard
    ) THEN
        p_Success := FALSE;
        p_Message := 'Số CMND đã tồn tại cho một nhân viên khác.';
        RETURN;
    END IF;

    -- Kiểm tra tính hợp lệ của vai trò
    IF p_Role NOT IN ('Employee', 'Manager') THEN
        p_Success := FALSE;
        p_Message := 'Vai trò nhân viên không hợp lệ.';
        RETURN;
    END IF;

    -- Thêm nhân viên mới vào bảng "Employee"
    BEGIN
        INSERT INTO "Employee" ("Username", "Password", "Name", "Birthdate", "Gender", "Address", "PhoneNumber", "IdentityCard", "Role")
        VALUES (p_Username, p_Password, p_Name, p_Birthdate, p_Gender, p_Address, p_PhoneNumber, p_IdentityCard, p_Role);
        p_Success := TRUE;
        p_Message := 'Nhân viên đã được thêm thành công.';
    EXCEPTION
        WHEN OTHERS THEN
            p_Success := FALSE;
            p_Message := 'Có lỗi xảy ra khi thêm nhân viên.';
    END;
END;
$$;

-- Procedure để thêm mới "Customer"
CREATE OR REPLACE PROCEDURE AddCustomer(
    IN p_Name VARCHAR(255),
    IN p_PhoneNumber VARCHAR(20),
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    BEGIN
        INSERT INTO "Customer" ("Name", "PhoneNumber")
        VALUES (p_Name, p_PhoneNumber);
        p_Success := TRUE;
        p_Message := 'Khách hàng đã được thêm thành công.';
    EXCEPTION
        WHEN OTHERS THEN
            p_Success := FALSE;
            p_Message := 'Có lỗi xảy ra khi thêm khách hàng.';
    END;
END;
$$;

-- Procedure để thêm mới "Movie"
CREATE OR REPLACE PROCEDURE AddMovie(
    IN p_Title VARCHAR(255),
    IN p_Author VARCHAR(255),
    IN p_Poster TEXT,
    IN p_Description VARCHAR(1000),
    IN p_Type VARCHAR(50),
    IN p_Duration FLOAT,
    IN p_ReleaseDate DATE,
    IN p_Published BOOLEAN,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Thêm bộ phim vào bảng "Movie"
    BEGIN
        INSERT INTO "Movie" ("Title", "Author", "Poster", "Description", "Type", "Duration", "ReleaseDate", "Published")
        VALUES (p_Title, p_Author, p_Poster, p_Description, p_Type, p_Duration, p_ReleaseDate, p_Published);
        p_Success := TRUE;
        p_Message := 'Thêm bộ phim thành công.';
    EXCEPTION
        WHEN others THEN
            p_Success := FALSE;
            p_Message := 'Có lỗi xảy ra khi thêm bộ phim.';
    END;
END;
$$;

-- Procedure để thêm mới "Showtime"
CREATE OR REPLACE PROCEDURE AddShowtime(
    IN p_MovieID INT,
    IN p_TheaterRoomID INT,
    IN p_StartTime TIMESTAMP,
    IN p_GiaVe MONEY
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_ShowtimeTonTai BOOLEAN;
    v_ShowtimeID INT;
BEGIN
    -- Kiểm tra xem showtime đã tồn tại chưa
    SELECT EXISTS(SELECT 1 FROM "Showtime" WHERE "MovieID" = p_MovieID AND "TheaterRoomID" = p_TheaterRoomID AND "StartTime" = p_StartTime) INTO v_ShowtimeTonTai;

    IF v_ShowtimeTonTai THEN
        RAISE EXCEPTION 'Showtime đã tồn tại.';
    ELSE
        -- Thêm mới showtime
        INSERT INTO "Showtime" ("MovieID", "TheaterRoomID", "StartTime", "EndTime", "Price")
        VALUES (p_MovieID, p_TheaterRoomID, p_StartTime, p_StartTime + INTERVAL '2 HOURS', p_GiaVe)
        RETURNING "ShowtimeID" INTO v_ShowtimeID;
        
        -- Đặt trạng thái cho các ghế của showtime
        INSERT INTO "ShowtimeSeat" ("SeatID", "ShowtimeID", "SeatNumber", "Type", "Status")
        SELECT s."SeatID", v_ShowtimeID, s."SeatNumber", s."Type", 'AVAILABLE'
        FROM "Seat" s
        WHERE s."TheaterRoomID" = p_TheaterRoomID;
        
        RAISE NOTICE 'Showtime đã được thêm thành công.';
    END IF;
END;
$$;

-- Procedure để thêm mới "ThreatRoom"
CREATE OR REPLACE PROCEDURE AddThreatRoom(
    IN p_RoomNumber INT,
    IN p_SeatQuantity INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_PhongDaTonTai BOOLEAN;
BEGIN
    -- Kiểm tra xem phòng chiếu đã tồn tại chưa
    SELECT EXISTS(SELECT 1 FROM "TheaterRoom" WHERE "RoomNumber" = p_RoomNumber) INTO v_PhongDaTonTai;

    IF v_PhongDaTonTai THEN
        RAISE EXCEPTION 'Phòng chiếu đã tồn tại.';
    ELSE
        -- Thêm mới phòng chiếu
        INSERT INTO "TheaterRoom" ("RoomNumber", "SeatQuantity")
        VALUES (p_RoomNumber, p_SeatQuantity);
        
        RAISE NOTICE 'Phòng chiếu đã được thêm thành công.';
    END IF;
END;
$$;

-- Procedure để thêm mới "Voucher"
CREATE OR REPLACE PROCEDURE AddVoucher(
    IN p_Title VARCHAR(255),
    IN p_Description VARCHAR(255),
    IN p_ValidFrom TIMESTAMP,
    IN p_ValidTo TIMESTAMP,
    IN p_Discount FLOAT,
    IN p_IsUsed BOOLEAN,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    BEGIN
        INSERT INTO "Voucher" ("Title", "Description", "ValidFrom", "ValidTo", "Discount", "IsUsed")
        VALUES (p_Title, p_Description, p_ValidFrom, p_ValidTo, p_Discount, p_IsUsed);
        p_Success := TRUE;
        p_Message := 'Thêm voucher thành công.';
    EXCEPTION
        WHEN others THEN
            p_Success := FALSE;
            p_Message := 'Có lỗi xảy ra khi thêm voucher.';
    END;
END;
$$;

-- Procedure để xóa "Employee"
CREATE OR REPLACE PROCEDURE DeleteEmployee(
    IN p_EmployeeID INT,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kiểm tra xem nhân viên có tồn tại hay không
    IF NOT EXISTS (
        SELECT 1 FROM "Employee" WHERE "EmployeeID" = p_EmployeeID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Nhân viên không tồn tại.';
        RETURN;
    END IF;

    -- Kiểm tra xem nhân viên có liên kết với bất kỳ đơn hàng nào không
    IF EXISTS (
        SELECT 1 FROM "Booking" WHERE "EmployeeID" = p_EmployeeID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Lỗi không thể xóa nhân viên này.';
        RETURN;
    END IF;

    -- Xóa nhân viên từ bảng "Employee"
    DELETE FROM "Employee" WHERE "EmployeeID" = p_EmployeeID;

    p_Success := TRUE;
    p_Message := 'Nhân viên đã được xóa thành công.';
END;
$$;

-- Procedure để xóa "Customer"
CREATE OR REPLACE PROCEDURE DeleteCustomer(
    IN p_CustomerID INT,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kiểm tra xem khách hàng có tồn tại hay không
    IF NOT EXISTS (
        SELECT 1 FROM "Customer" WHERE "CustomerID" = p_CustomerID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Khách hàng không tồn tại.';
        RETURN;
    END IF;

    -- Kiểm tra xem khách hàng có liên kết với bất kỳ đơn hàng nào không
    IF EXISTS (
        SELECT 1 FROM "Booking" WHERE "CustomerID" = p_CustomerID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Lỗi không thể xóa khách hàng này.';
        RETURN;
    END IF;

    -- Xóa khách hàng từ bảng "Customer"
    DELETE FROM "Customer" WHERE "CustomerID" = p_CustomerID;

    p_Success := TRUE;
    p_Message := 'Khách hàng đã được xóa thành công.';
END;
$$;

-- Procedure để xóa "Movie"
CREATE OR REPLACE PROCEDURE DeleteMovie(
    IN p_MovieID INT,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kiểm tra xem bộ phim có tồn tại hay không
    IF NOT EXISTS (
        SELECT 1 FROM "Movie" WHERE "MovieID" = p_MovieID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Bộ phim không tồn tại.';
        RETURN;
    END IF;

    -- Kiểm tra xem bộ phim có liên kết với bất kỳ buổi chiếu nào không
    IF EXISTS (
        SELECT 1 FROM "Showtime" WHERE "MovieID" = p_MovieID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Lỗi không thể xóa bộ phim này.';
        RETURN;
    END IF;

    -- Xóa bộ phim từ bảng "Movie"
    DELETE FROM "Movie" WHERE "MovieID" = p_MovieID;

    p_Success := TRUE;
    p_Message := 'Bộ phim đã được xóa thành công.';
END;
$$;

-- Procedure để xóa "Showtime"
CREATE OR REPLACE PROCEDURE DeleteShowtime(
    IN p_ShowtimeID INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_ShowtimeTonTai BOOLEAN;
    v_VeDaDuocBanRa BOOLEAN;
BEGIN
    -- Kiểm tra xem showtime có tồn tại không
    SELECT EXISTS(SELECT 1 FROM "Showtime" WHERE "ShowtimeID" = p_ShowtimeID) INTO v_ShowtimeTonTai;

    IF NOT v_ShowtimeTonTai THEN
        RAISE EXCEPTION 'Showtime không tồn tại.';
    ELSE
        -- Kiểm tra xem có vé đã được bán ra cho showtime không
        SELECT EXISTS(SELECT 1 FROM "Ticket" WHERE "ShowtimeSeatID" IN (SELECT "ShowtimeSeatID" FROM "ShowtimeSeat" WHERE "ShowtimeID" = p_ShowtimeID)) INTO v_VeDaDuocBanRa;
        
        IF v_VeDaDuocBanRa THEN
            RAISE EXCEPTION 'Không thể xóa showtime vì đã có vé được bán ra.';
        ELSE
            -- Xóa các ghế của showtime
            DELETE FROM "ShowtimeSeat" WHERE "ShowtimeID" = p_ShowtimeID;
            
            -- Xóa showtime
            DELETE FROM "Showtime" WHERE "ShowtimeID" = p_ShowtimeID;
            
            RAISE NOTICE 'Showtime đã được xóa thành công.';
        END IF;
    END IF;
END;
$$;

-- Procedure để xóa "TheatRoom"
CREATE OR REPLACE PROCEDURE DeleteTheatRoom(
    IN p_TheaterRoomID INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_PhongTonTai BOOLEAN;
    v_GheDaDuocBanRa BOOLEAN;
BEGIN
    -- Kiểm tra xem phòng chiếu có tồn tại không
    SELECT EXISTS(SELECT 1 FROM "TheaterRoom" WHERE "TheaterRoomID" = p_TheaterRoomID) INTO v_PhongTonTai;

    IF NOT v_PhongTonTai THEN
        RAISE EXCEPTION 'Phòng chiếu không tồn tại.';
    ELSE
        -- Kiểm tra xem có ghế nào đã được bán ra trong phòng chiếu không
        SELECT EXISTS(SELECT 1 FROM "Ticket" WHERE "ShowtimeSeatID" IN (SELECT "ShowtimeSeatID" FROM "ShowtimeSeat" WHERE "SeatID" IN (SELECT "SeatID" FROM "Seat" WHERE "TheaterRoomID" = p_TheaterRoomID))) INTO v_GheDaDuocBanRa;
        
        IF v_GheDaDuocBanRa THEN
            RAISE EXCEPTION 'Không thể xóa phòng chiếu vì đã có ghế được bán ra.';
        ELSE
            -- Xóa các ghế thuộc phòng chiếu
            DELETE FROM "ShowtimeSeat" WHERE "SeatID" IN (SELECT "SeatID" FROM "Seat" WHERE "TheaterRoomID" = p_TheaterRoomID);
            DELETE FROM "Seat" WHERE "TheaterRoomID" = p_TheaterRoomID;

            -- Xóa phòng chiếu
            DELETE FROM "TheaterRoom" WHERE "TheaterRoomID" = p_TheaterRoomID;
            
            RAISE NOTICE 'Phòng chiếu đã được xóa thành công.';
        END IF;
    END IF;
END;
$$;

-- Procedure để xóa "Voucher"
CREATE OR REPLACE PROCEDURE DeleteVoucher(
    IN p_VoucherID INT,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kiểm tra xem voucher có tồn tại hay không
    IF NOT EXISTS (
        SELECT 1 FROM "Voucher" WHERE "VoucherID" = p_VoucherID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Voucher không tồn tại.';
        RETURN;
    END IF;

    -- Xóa voucher từ bảng "Voucher"
    BEGIN
        DELETE FROM "Voucher" WHERE "VoucherID" = p_VoucherID;
        p_Success := TRUE;
        p_Message := 'Voucher đã được xóa thành công.';
    EXCEPTION
        WHEN OTHERS THEN
            p_Success := FALSE;
            p_Message := 'Có lỗi xảy ra khi xóa voucher.';
    END;
END;
$$;

-- Procedure để cập nhật "Employee"
CREATE OR REPLACE PROCEDURE UpdateEmployeeInfo(
    IN p_EmployeeID INT,
    IN p_FieldToUpdate VARCHAR(50),
    IN p_NewValue VARCHAR(255),
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kiểm tra xem nhân viên có tồn tại hay không
    IF NOT EXISTS (
        SELECT 1 FROM "Employee" WHERE "EmployeeID" = p_EmployeeID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Nhân viên không tồn tại.';
        RETURN;
    END IF;

    -- Kiểm tra xem trường cập nhật có hợp lệ hay không
    IF NOT p_FieldToUpdate IN ('Name', 'Role', 'Username', 'Password', 'Birthdate', 'Gender', 'Address', 'PhoneNumber', 'IdentityCard') THEN
        p_Success := FALSE;
        p_Message := 'Trường cập nhật không hợp lệ.';
        RETURN;
    END IF;

    -- Cập nhật thông tin của nhân viên
    BEGIN
        EXECUTE FORMAT('UPDATE "Employee" SET "%I" = $1 WHERE "EmployeeID" = $2', p_FieldToUpdate)
        USING p_NewValue, p_EmployeeID;
        
        p_Success := TRUE;
        p_Message := 'Thông tin của nhân viên đã được cập nhật thành công.';
    EXCEPTION
        WHEN OTHERS THEN
            p_Success := FALSE;
            p_Message := 'Có lỗi xảy ra khi cập nhật thông tin của nhân viên.';
    END;
END;
$$;

-- Procedure để cập nhật "Customer"
CREATE OR REPLACE PROCEDURE UpdateCustomer(
    IN p_CustomerID INT,
    IN p_Name VARCHAR(255),
    IN p_PhoneNumber VARCHAR(20),
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kiểm tra xem khách hàng có tồn tại hay không
    IF NOT EXISTS (
        SELECT 1 FROM "Customer" WHERE "CustomerID" = p_CustomerID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Khách hàng không tồn tại.';
        RETURN;
    END IF;

    -- Cập nhật thông tin của khách hàng
    BEGIN
        UPDATE "Customer" 
        SET "Name" = p_Name, "PhoneNumber" = p_PhoneNumber
        WHERE "CustomerID" = p_CustomerID;
        p_Success := TRUE;
        p_Message := 'Thông tin của khách hàng đã được cập nhật thành công.';
    EXCEPTION
        WHEN OTHERS THEN
            p_Success := FALSE;
            p_Message := 'Có lỗi xảy ra khi cập nhật thông tin của khách hàng.';
    END;
END;
$$;

-- Procedure để cập nhật "Movie"
CREATE OR REPLACE PROCEDURE UpdateMovie(
    IN p_MovieID INT,
    IN p_Title VARCHAR(255),
    IN p_Author VARCHAR(255),
    IN p_Poster TEXT,
    IN p_Description VARCHAR(1000),
    IN p_Type VARCHAR(50),
    IN p_Duration FLOAT,
    IN p_ReleaseDate DATE,
    IN p_Published BOOLEAN,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kiểm tra xem bộ phim có tồn tại hay không
    IF NOT EXISTS (
        SELECT 1 FROM "Movie" WHERE "MovieID" = p_MovieID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Bộ phim không tồn tại.';
        RETURN;
    END IF;

    -- Cập nhật thông tin của bộ phim
    BEGIN
        UPDATE "Movie" 
        SET "Title" = p_Title, "Author" = p_Author, "Poster" = p_Poster,
            "Description" = p_Description, "Type" = p_Type, "Duration" = p_Duration,
            "ReleaseDate" = p_ReleaseDate, "Published" = p_Published
        WHERE "MovieID" = p_MovieID;
        p_Success := TRUE;
        p_Message := 'Thông tin của bộ phim đã được cập nhật thành công.';
    EXCEPTION
        WHEN OTHERS THEN
            p_Success := FALSE;
            p_Message := 'Có lỗi xảy ra khi cập nhật thông tin của bộ phim.';
    END;
END;
$$;

-- Procedure để cập nhật Showtime
CREATE OR REPLACE PROCEDURE UpdateShowtime(
    IN p_ShowtimeID INT,
    IN p_MovieID INT,
    IN p_TheaterRoomID INT,
    IN p_StartTime TIMESTAMP,
    IN p_Price MONEY
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_ShowtimeTonTai BOOLEAN;
BEGIN
    -- Kiểm tra xem showtime có tồn tại không
    SELECT EXISTS(SELECT 1 FROM "Showtime" WHERE "ShowtimeID" = p_ShowtimeID) INTO v_ShowtimeTonTai;

    IF NOT v_ShowtimeTonTai THEN
        RAISE EXCEPTION 'Showtime không tồn tại.';
    ELSE
        -- Cập nhật thông tin của showtime
        UPDATE "Showtime" 
        SET 
            "MovieID" = p_MovieID,
            "TheaterRoomID" = p_TheaterRoomID,
            "StartTime" = p_StartTime,
            "EndTime" = p_StartTime + INTERVAL '2 HOURS',
            "Price" = p_Price
        WHERE "ShowtimeID" = p_ShowtimeID;
        
        RAISE NOTICE 'Thông tin của Showtime đã được cập nhật thành công.';
    END IF;
END;
$$;

-- Procedure để cập nhật ThreatRoom
CREATE OR REPLACE PROCEDURE UpdateThreatRoom(
    IN p_TheaterRoomID INT,
    IN p_RoomNumber INT,
    IN p_SeatQuantity INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_PhongTonTai BOOLEAN;
BEGIN
    -- Kiểm tra xem phòng chiếu có tồn tại không
    SELECT EXISTS(SELECT 1 FROM "TheaterRoom" WHERE "TheaterRoomID" = p_TheaterRoomID) INTO v_PhongTonTai;

    IF NOT v_PhongTonTai THEN
        RAISE EXCEPTION 'Phòng chiếu không tồn tại.';
    ELSE
        -- Cập nhật thông tin của phòng chiếu
        UPDATE "TheaterRoom" 
        SET 
            "RoomNumber" = p_RoomNumber,
            "SeatQuantity" = p_SeatQuantity
        WHERE "TheaterRoomID" = p_TheaterRoomID;
        
        RAISE NOTICE 'Thông tin của phòng chiếu đã được cập nhật thành công.';
    END IF;
END;
$$;

-- Procedure để cập nhật ShowtimeSeat
CREATE OR REPLACE PROCEDURE UpdateShowtimeSeat(
    IN p_ShowtimeSeatID INT,
    IN p_SeatID INT,
    IN p_ShowtimeID INT,
    IN p_SeatNumber VARCHAR,
    IN p_SeatType SEAT_TYPE,
    IN p_Status SEAT_STATUS
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_GheShowtimeTonTai BOOLEAN;
BEGIN
    -- Kiểm tra xem ghế của showtime có tồn tại không
    SELECT EXISTS(SELECT 1 FROM "ShowtimeSeat" WHERE "ShowtimeSeatID" = p_ShowtimeSeatID) INTO v_GheShowtimeTonTai;

    IF NOT v_GheShowtimeTonTai THEN
        RAISE EXCEPTION 'Ghế của showtime không tồn tại.';
    ELSE
        -- Cập nhật thông tin của ghế của showtime
        UPDATE "ShowtimeSeat" 
        SET 
            "SeatID" = p_SeatID,
            "ShowtimeID" = p_ShowtimeID,
            "SeatNumber" = p_SeatNumber,
            "Type" = p_SeatType,
            "Status" = p_Status
        WHERE "ShowtimeSeatID" = p_ShowtimeSeatID;
        
        RAISE NOTICE 'Thông tin của ghế của showtime đã được cập nhật thành công.';
    END IF;
END;
$$;

-- Procedure để cập nhật Voucher
CREATE OR REPLACE PROCEDURE UpdateVoucher(
    IN p_VoucherID INT,
    IN p_Title VARCHAR(255),
    IN p_Description VARCHAR(255),
    IN p_ValidFrom TIMESTAMP,
    IN p_ValidTo TIMESTAMP,
    IN p_Discount FLOAT,
    IN p_IsUsed BOOLEAN,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kiểm tra xem voucher có tồn tại hay không
    IF NOT EXISTS (
        SELECT 1 FROM "Voucher" WHERE "VoucherID" = p_VoucherID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Voucher không tồn tại.';
        RETURN;
    END IF;

    -- Cập nhật thông tin của voucher
    BEGIN
        UPDATE "Voucher" 
        SET "Title" = p_Title, "Description" = p_Description,
            "ValidFrom" = p_ValidFrom, "ValidTo" = p_ValidTo,
            "Discount" = p_Discount, "IsUsed" = p_IsUsed
        WHERE "VoucherID" = p_VoucherID;
        p_Success := TRUE;
        p_Message := 'Thông tin của voucher đã được cập nhật thành công.';
    EXCEPTION
        WHEN OTHERS THEN
            p_Success := FALSE;
            p_Message := 'Có lỗi xảy ra khi cập nhật thông tin của voucher.';
    END;
END;
$$;

-- Procedure để tạo mới một hóa đơn
CREATE OR REPLACE PROCEDURE AddInvoice(
    IN p_CustomerID INT,
    IN p_EmployeeID INT,
    IN p_ShowtimeID INT,
    IN p_TotalPrice MONEY,
    IN p_FinalPrice MONEY,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255),
    OUT p_InvoiceID INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_BookingID INT;
    v_VoucherID INT;
BEGIN
    -- Kiểm tra tính hợp lệ của khách hàng
    IF NOT EXISTS (
        SELECT 1 FROM "Customer" WHERE "CustomerID" = p_CustomerID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Khách hàng không tồn tại.';
        RETURN;
    END IF;

    -- Kiểm tra tính hợp lệ của nhân viên
    IF NOT EXISTS (
        SELECT 1 FROM "Employee" WHERE "EmployeeID" = p_EmployeeID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Nhân viên không tồn tại.';
        RETURN;
    END IF;

    -- Kiểm tra tính hợp lệ của suất chiếu
    IF NOT EXISTS (
        SELECT 1 FROM "Showtime" WHERE "ShowtimeID" = p_ShowtimeID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Suất chiếu không tồn tại.';
        RETURN;
    END IF;

    -- Tạo booking mới
    INSERT INTO "Booking" ("CustomerID", "EmployeeID", "ShowtimeID", "CreatedAt", "TotalPrice", "FinalPrice")
    VALUES (p_CustomerID, p_EmployeeID, p_ShowtimeID, CURRENT_TIMESTAMP, p_TotalPrice, p_FinalPrice)
    RETURNING "BookingID" INTO v_BookingID;

    -- Lấy voucher sẵn có (nếu có)
    SELECT "VoucherID" INTO v_VoucherID
    FROM "Voucher"
    WHERE "CustomerID" = p_CustomerID AND "ValidTo" > CURRENT_TIMESTAMP AND "IsUsed" = FALSE
    ORDER BY "Discount" DESC
    LIMIT 1;

    -- Cập nhật thông tin voucher
    IF v_VoucherID IS NOT NULL THEN
        UPDATE "Voucher" SET "IsUsed" = TRUE WHERE "VoucherID" = v_VoucherID;
    END IF;

    -- Lấy ID của hóa đơn mới thêm
    SELECT "BookingID" INTO p_InvoiceID FROM "Booking" WHERE "BookingID" = v_BookingID;

    p_Success := TRUE;
    p_Message := 'Hóa đơn đã được tạo thành công.';
EXCEPTION
    WHEN others THEN
        p_Success := FALSE;
        p_Message := 'Có lỗi xảy ra khi tạo hóa đơn.';
END;
$$;

---------------------------------------- VI. FUNCTION ----------------------------------------
-- Function để tính giá vé đã áp dụng voucher (Nếu có)
CREATE OR REPLACE FUNCTION calculateTicketPrice(
    IN basePrice MONEY,
    IN voucherDiscount FLOAT DEFAULT 0
)
RETURNS MONEY AS $$
DECLARE
    finalPrice MONEY;
BEGIN
    -- Nếu có voucher, tính giá vé cuối cùng dựa trên giá cơ sở và giảm giá từ voucher
    IF voucherDiscount > 0 THEN
        finalPrice := basePrice - (basePrice * voucherDiscount);
    ELSE
        -- Nếu không có voucher, giá vé cuối cùng là giá cơ sở
        finalPrice := basePrice;
    END IF;

    -- Đảm bảo giá vé cuối cùng không nhỏ hơn 0
    IF finalPrice < 0::money THEN
        finalPrice := 0::money;
    END IF;

    -- Trả về giá vé cuối cùng
    RETURN finalPrice;
END;
$$ LANGUAGE plpgsql;

-- Function để tính tổng doanh thu cho một suất chiếu
CREATE OR REPLACE FUNCTION calculateShowtimeRevenue(
    IN showtimeID INT,
    IN monthFilter DATE
)
RETURNS MONEY AS $$
DECLARE
    v_TotalRevenue MONEY;
BEGIN
    -- Kiểm tra xem suất chiếu có tồn tại không
    IF NOT EXISTS (
        SELECT 1 FROM "Showtime" WHERE "ShowtimeID" = showtimeID
    ) THEN
        RAISE EXCEPTION 'Suất chiếu không tồn tại.';
    END IF;

    -- Tính tổng doanh thu từ các vé đã bán cho suất chiếu đó
  	SELECT SUM("TotalPrice") INTO v_TotalRevenue
    FROM "Booking"
    WHERE EXTRACT(MONTH FROM "CreatedAt") = EXTRACT(MONTH FROM monthFilter)
    AND EXTRACT(YEAR FROM "CreatedAt") = EXTRACT(YEAR FROM monthFilter)
    AND "ShowtimeID" = showtimeID;

    RETURN v_TotalRevenue;
END;
$$ LANGUAGE plpgsql;

-- Function để tính tổng doanh thu của 1 ngày, của 1 tháng, của 1 năm hay tất cả
CREATE OR REPLACE FUNCTION calculateRevenue(
    IN dateFilter DATE,
    IN filterType VARCHAR
)
RETURNS MONEY AS $$
DECLARE
    totalRevenue MONEY;
BEGIN
    CASE filterType
        WHEN 'day' THEN
            SELECT SUM("TotalPrice") INTO totalRevenue
            FROM "Booking"
            WHERE DATE("CreatedAt") = dateFilter;
        WHEN 'month' THEN
            SELECT SUM("TotalPrice") INTO totalRevenue
            FROM "Booking"
            WHERE EXTRACT(MONTH FROM "CreatedAt") = EXTRACT(MONTH FROM dateFilter)
            AND EXTRACT(YEAR FROM "CreatedAt") = EXTRACT(YEAR FROM dateFilter);
        WHEN 'year' THEN
            SELECT SUM("TotalPrice") INTO totalRevenue
            FROM "Booking"
            WHERE EXTRACT(YEAR FROM "CreatedAt") = EXTRACT(YEAR FROM dateFilter);
        ELSE
            RAISE EXCEPTION 'Invalid filter type';
    END CASE;

    RETURN totalRevenue;
END;
$$ LANGUAGE plpgsql;

-- Function để tính số lượng khách hàng của 1 tháng
CREATE OR REPLACE FUNCTION CalculateTotalCustomersOfMonth(
    p_Month INT,
    p_Year INT
)
RETURNS INT AS $$
DECLARE
    v_TotalCustomers INT;
BEGIN
    -- Kiểm tra xem tháng và năm có hợp lệ không
    IF p_Month < 1 OR p_Month > 12 THEN
        RAISE EXCEPTION 'Tháng không hợp lệ.';
    END IF;

    -- Tính số lượng khách hàng cho tháng và năm cụ thể
    SELECT COUNT(DISTINCT "CustomerID") INTO v_TotalCustomers
    FROM "Booking"
    WHERE EXTRACT(MONTH FROM "CreatedAt") = p_Month
    AND EXTRACT(YEAR FROM "CreatedAt") = p_Year;

    RETURN v_TotalCustomers;
END;
$$ LANGUAGE plpgsql;

-- Function để tính số lượng hóa đơn trong 1 tháng
CREATE OR REPLACE FUNCTION CalculateTotalOrdersOfMonth(
    p_Month INT,
    p_Year INT
)
RETURNS INT AS $$
DECLARE
    v_TotalOrders INT;
BEGIN
    -- Kiểm tra xem tháng và năm có hợp lệ không
    IF p_Month < 1 OR p_Month > 12 THEN
        RAISE EXCEPTION 'Tháng không hợp lệ.';
    END IF;

    -- Tính số lượng hóa đơn cho tháng và năm cụ thể
    SELECT COUNT(*) INTO v_TotalOrders
    FROM "Booking"
    WHERE EXTRACT(MONTH FROM "CreatedAt") = p_Month
    AND EXTRACT(YEAR FROM "CreatedAt") = p_Year;

    RETURN v_TotalOrders;
END;
$$ LANGUAGE plpgsql;

-- Function thống kê top 10 nhân viên bán vé nhiều nhất tháng
CREATE OR REPLACE FUNCTION top_selling_employees_in_month(month_val INT) RETURNS TABLE (
    "EmployeeID" INT,
    "EmployeeName" VARCHAR,
    "TotalTicketsSold" INT
) AS
$$
BEGIN
    -- Tạo bảng tạm thời để lưu kết quả
    CREATE TEMP TABLE temp_top_employees (
        "EmployeeID" INT,
        "EmployeeName" VARCHAR,
        "TotalTicketsSold" INT DEFAULT 0
    );

    -- Insert dữ liệu vào bảng tạm thời
    INSERT INTO temp_top_employees ("EmployeeID", "EmployeeName", "TotalTicketsSold")
    SELECT b."EmployeeID", e."Name", COUNT(DISTINCT t."TicketID")
    FROM "Booking" b
    JOIN "Employee" e ON b."EmployeeID" = e."EmployeeID"
    JOIN "Ticket" t ON b."BookingID" = t."BookingID"
    WHERE EXTRACT(MONTH FROM b."CreatedAt") = month_val
    GROUP BY b."EmployeeID", e."Name";

    -- Lấy top 10 nhân viên theo số vé đã bán và trả về kết quả
    RETURN QUERY (
        SELECT *
        FROM temp_top_employees
        ORDER BY "TotalTicketsSold" DESC
        LIMIT 10
    );

    -- Xóa bảng tạm sau khi sử dụng
    DROP TABLE temp_top_employees;
END;
$$
LANGUAGE plpgsql;

---------------------------------------- VII. CURSOR ----------------------------------------
-- Procedure chứa cursor thống kê top 5 phim bán vé chạy nhất tháng
CREATE OR REPLACE FUNCTION top_movies_in_month(month_val INT) RETURNS TABLE (
    "MovieID" INT,
    "Title" VARCHAR,
    "TotalTicketsSold" INT
) AS
$$
DECLARE
    movie_record RECORD;
    ticket_count INT;
    movie_cursor CURSOR FOR
        SELECT m."MovieID", m."Title"
        FROM "Movie" m;

BEGIN
    -- Tạo bảng tạm thời để lưu kết quả
    CREATE TEMP TABLE temp_top_movies (
        "MovieID" INT,
        "Title" VARCHAR,
        "TotalTicketsSold" INT DEFAULT 0
    );

    -- Duyệt qua từng bộ phim
    FOR movie_record IN movie_cursor LOOP
        -- Đếm số vé đã bán cho từng bộ phim trong tháng
        SELECT COUNT(t."TicketID") INTO ticket_count
        FROM "Ticket" t
        JOIN "ShowtimeSeat" ss ON t."ShowtimeSeatID" = ss."ShowtimeSeatID"
        JOIN "Showtime" s ON ss."ShowtimeID" = s."ShowtimeID"
        JOIN "Booking" b ON t."BookingID" = b."BookingID"
        WHERE s."MovieID" = movie_record."MovieID"
        AND EXTRACT(MONTH FROM b."CreatedAt") = month_val;

        -- Thêm kết quả vào bảng tạm thời
        INSERT INTO temp_top_movies ("MovieID", "Title", "TotalTicketsSold")
        VALUES (movie_record."MovieID", movie_record."Title", ticket_count);
    END LOOP;

    -- Lấy top 5 bộ phim theo số vé đã bán và trả về kết quả
    RETURN QUERY (
        SELECT *
        FROM temp_top_movies
        ORDER BY "TotalTicketsSold" DESC
        LIMIT 5
    );

    -- Xóa bảng tạm sau khi sử dụng
    DROP TABLE temp_top_movies;
END;
$$
LANGUAGE plpgsql;

-- Procedure chứa cursor để xem lịch sử đặt vé của khách hàng
CREATE OR REPLACE PROCEDURE ViewBookingHistory(
    p_CustomerID INT,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255),
    OUT ref refcursor
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Kiểm tra xem khách hàng có tồn tại không
    IF NOT EXISTS (
        SELECT 1 FROM "Customer" WHERE "CustomerID" = p_CustomerID
    ) THEN
        p_Success := FALSE;
        p_Message := 'Khách hàng không tồn tại.';
        RETURN;
    END IF;

    -- Mở con trỏ để lấy lịch sử đặt hàng của khách hàng
    OPEN ref FOR
    SELECT *
    FROM "Booking"
    WHERE "CustomerID" = p_CustomerID;

    p_Success := TRUE;
    p_Message := 'Lịch sử đặt hàng đã được trả về.';
END;
$$;

-- Procedure chứa cursor để tìm kiếm suất chiếu theo ngày
CREATE OR REPLACE PROCEDURE SearchShowtimesByDate(
    p_SearchDate DATE,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_Showtimes CURSOR FOR
        SELECT "ShowtimeID", "MovieID", "TheaterRoomID", "StartTime", "EndTime", "Price"
        FROM "Showtime"
        WHERE DATE("StartTime") = p_SearchDate;
    v_ShowtimeRecord RECORD;
BEGIN
    -- Kiểm tra xem ngày tìm kiếm có hợp lệ không
    IF p_SearchDate IS NULL THEN
        p_Success := FALSE;
        p_Message := 'Ngày tìm kiếm không được để trống.';
        RETURN;
    END IF;

    -- Mở cursor để lấy thông tin các suất chiếu
    OPEN v_Showtimes;

    -- Nếu không tìm thấy suất chiếu nào, thông báo
    IF NOT FOUND THEN
        p_Success := FALSE;
        p_Message := 'Không tìm thấy suất chiếu nào cho ngày đã chọn.';
        RETURN;
    END IF;

    -- Lấy thông tin các suất chiếu và gửi kết quả
    p_Success := TRUE;
    p_Message := 'Danh sách các suất chiếu cho ngày đã chọn:';
    
    -- Duyệt qua từng suất chiếu trong cursor và gửi thông tin
    LOOP
        FETCH v_Showtimes INTO v_ShowtimeRecord;
        EXIT WHEN NOT FOUND;
        -- In thông tin suất chiếu hoặc xử lý theo nhu cầu
        -- Ví dụ: RAISE NOTICE 'ShowtimeID: %, MovieID: %, StartTime: %, EndTime: %', v_ShowtimeRecord.ShowtimeID, v_ShowtimeRecord.MovieID, v_ShowtimeRecord.StartTime, v_ShowtimeRecord.EndTime;
    END LOOP;

    -- Đóng cursor sau khi sử dụng
    CLOSE v_Showtimes;
END;
$$;

---------------------------------------- VIII. PHÂN QUYỀN ----------------------------------------

-- Tạo role quản lý - Manager
CREATE ROLE "Manager_Role";
-- Tạo role nhân viên - Employee
CREATE ROLE "Employee_Role";

-- Tạo user nhân viên và gán role nhân viên cho user
CREATE USER "Employee_User";
GRANT "Manager_Role" TO "Manager_User";
ALTER ROLE "Manager_User" SET ROLE "Manager_Role";

-- Tạo user người quản lý và gán role quản lý cho user
CREATE USER "Manager_User";
GRANT "Employee_Role" TO "Employee_User";
ALTER ROLE "Employee_User" SET ROLE "Employee_Role";

-- Cấp quyền cho nhân viên (Employee)
GRANT SELECT, INSERT, UPDATE ON "TheaterRoom" TO "Employee_Role";
GRANT SELECT, INSERT, UPDATE ON "Movie" TO "Employee_Role";
GRANT SELECT, INSERT, UPDATE ON "Showtime" TO "Employee_Role";
GRANT SELECT, INSERT, UPDATE ON "Ticket" TO "Employee_Role";
GRANT SELECT, INSERT, UPDATE ON "Booking" TO "Employee_Role";
GRANT SELECT, INSERT, UPDATE ON "Customer" TO "Employee_Role";
GRANT SELECT, INSERT, UPDATE ON "Voucher" TO "Employee_Role";
GRANT SELECT, INSERT, UPDATE ON "Seat" TO "Employee_Role";
GRANT SELECT, INSERT, UPDATE ON "ShowtimeSeat" TO "Employee_Role";

-- Cấp quyền cho người quản lý (Manager)
GRANT SELECT, INSERT, UPDATE ON TABLE "Employee" TO "Manager_Role";
GRANT SELECT, INSERT, UPDATE ON TABLE "TheaterRoom" TO "Manager_Role";
GRANT SELECT, INSERT, UPDATE ON TABLE "Movie" TO "Manager_Role";
GRANT SELECT, INSERT, UPDATE ON TABLE "Showtime" TO "Manager_Role";
GRANT SELECT, INSERT, UPDATE ON TABLE "Ticket" TO "Manager_Role";
GRANT SELECT, INSERT, UPDATE ON TABLE "Customer" TO "Manager_Role";
GRANT SELECT, INSERT, UPDATE ON TABLE "Voucher" TO "Manager_Role";
GRANT SELECT, INSERT, UPDATE ON TABLE "Seat" TO "Manager_Role";
GRANT SELECT, INSERT, UPDATE ON "ShowtimeSeat" TO "Manager_Role";

--Các Procedure role nhân viên được cấp quyền thực thi
GRANT EXECUTE ON PROCEDURE book_movie_ticket TO "Employee_Role";
GRANT EXECUTE ON PROCEDURE CancelTicket TO "Employee_Role";
GRANT EXECUTE ON PROCEDURE AddCustomer TO "Employee_Role";
GRANT EXECUTE ON PROCEDURE DeleteCustomer TO "Employee_Role";
GRANT EXECUTE ON PROCEDURE UpdateCustomer TO "Employee_Role";
GRANT EXECUTE ON PROCEDURE UpdateMovie TO "Employee_Role";
GRANT EXECUTE ON PROCEDURE AddInvoice TO "Employee_Role";

--Các Function role nhân viên được cấp quyền thực thi
GRANT EXECUTE ON FUNCTION calculateTicketPrice TO "Employee_Role";

--Các Cursor role nhân viên được cấp quyền thực thi
GRANT EXECUTE ON PROCEDURE ViewBookingHistory TO "Employee_Role";
GRANT EXECUTE ON PROCEDURE SearchShowtimesByDate TO "Employee_Role";

—-------Quản lý—---------------
--Các Procedure role quản lý được cấp quyền thực thi
GRANT EXECUTE ON PROCEDURE book_movie_ticket TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE CancelTicket TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE ChangeTicketPrice TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE AddEmployee TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE AddCustomer TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE AddMovie TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE AddShowtime TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE AddThreatRoom TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE AddVoucher TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE DeleteEmployee TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE DeleteCustomer TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE DeleteMovie TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE DeleteShowtime TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE DeleteTheatRoom TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE DeleteVoucher TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE UpdateEmployeeInfo TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE UpdateCustomer TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE UpdateMovie TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE UpdateShowtime TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE UpdateThreatRoom TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE UpdateShowtimeSeat TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE UpdateVoucher TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE AddInvoice TO "Manager_Role";

--Các Function role quản lý được cấp quyền thực thi
GRANT EXECUTE ON FUNCTION calculateTicketPrice TO "Manager_Role";
GRANT EXECUTE ON FUNCTION calculateShowtimeRevenue TO "Manager_Role";
GRANT EXECUTE ON FUNCTION calculateRevenue TO "Manager_Role";
GRANT EXECUTE ON FUNCTION CalculateTotalCustomersOfMonth TO "Manager_Role";
GRANT EXECUTE ON FUNCTION CalculateTotalOrdersOfMonth TO "Manager_Role";
GRANT EXECUTE ON FUNCTION top_selling_employees_in_month TO "Manager_Role";

--Các Cursor role quản lý được cấp quyền thực thi
GRANT EXECUTE ON FUNCTION top_movies_in_month TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE ViewBookingHistory TO "Manager_Role";
GRANT EXECUTE ON PROCEDURE SearchShowtimesByDate TO "Manager_Role";

---------------------------------------- IX. VIEW ----------------------------------------
------------------------------ View để ẩn thông tin nhạy cảm ------------------------------
-- Tạo view để ẩn mật khẩu và số CCCD/CMND cho Employee
CREATE VIEW "View_Employee"
AS
SELECT "EmployeeID", "Username", "Name", "Birthdate", "Gender", "Address", "PhoneNumber", "Role"
FROM "Employee";

--Tiến hành gán lại quyền
--Employee_User
REVOKE SELECT ON "Employee" FROM "Employee_User";
GRANT SELECT ON "View_Employee" TO "Employee_User";

------------------------------ Tạo view để ẩn doanh thu rạp phim theo tháng ------------------------------
CREATE VIEW "View_Monthly_Sales" 
AS
SELECT date_trunc('month', b."CreatedAt") AS "Tháng", SUM(b."FinalPrice") AS "Tổng doanh thu"
FROM "Booking" b
WHERE DATE_TRUNC('month', b."CreatedAt") = DATE_TRUNC('month', CURRENT_DATE)
GROUP BY date_trunc('month', b."CreatedAt");

--Tiến hành gán lại quyền
--Manager_User
GRANT SELECT ON "View_Monthly_Sales" TO "Manager_Role";


------------------------------ View để giới hạn dữ liệu dựa trên điều kiện ------------------------------
-- Tạo view để xem các phòng chiếu có nhiều hơn 100 ghế
CREATE VIEW "View_Theater_100_Seats" 
AS
SELECT "TheaterRoomID", "RoomNumber"
FROM "TheaterRoom"
WHERE "SeatQuantity" >= 100;

-- Tạo view để xem các voucher còn hạn sử dụng cho đến hiện tại
CREATE VIEW "View_Vouchers_Available" 
AS
SELECT *
FROM "Voucher"
WHERE "ValidTo" >= NOW();


------------------------------ View để kết hợp dữ liệu từ nhiều bảng ------------------------------
-- Tạo view để xem top 10 khách hàng booking theo ID => Biết được khách hàng thân thiết
CREATE VIEW "View_Top10_Customer_Booking" 
AS
SELECT cm."CustomerID", cm."Name", COUNT(b."BookingID") AS "Thong_Tin"
FROM "Customer" cm
JOIN "Booking" b ON cm."CustomerID" = b."CustomerID"
GROUP BY cm."CustomerID"
ORDER BY COUNT(b."BookingID") DESC
LIMIT 10;

-- Tạo view để xem chi tiết phim, số lượng suất chiếu cùng giá suất chiếu của phim
CREATE VIEW "View_Movies_Showtimes" 
AS
SELECT mv."Title" AS "Ten_phim", 
	   COUNT(s."ShowtimeID") AS "So_luong_suat_chieu",
	   s."Price" AS "Gia_suat_chieu_trung_binh"
FROM "Movie" mv
JOIN "Showtime" s ON mv."MovieID" = s."MovieID"
GROUP BY mv."Title";

-- Tạo view để xem các nhân viên chưa tạo được booking nào
CREATE VIEW "View_Employee_No_Booking" AS
SELECT e."EmployeeID", "Name"
FROM "Booking" b
RIGHT JOIN "Employee" e ON b."EmployeeID" = e."EmployeeID"
WHERE b."BookingID" IS NULL;

-- Tạo view để xem danh sách các phim chiếu tại rạp vào hôm nay
CREATE VIEW "Today's_Movies" AS
SELECT mv."MovieID", mv."Title", s."StartTime", s."EndTime", s."Price"
FROM "Movie" mv
JOIN "Showtime" s ON mv."MovieID" = s."MovieID"
WHERE s."StartTime" >= CURRENT_DATE AND s."EndTime" < CURRENT_DATE + INTERVAL '1 day';


------------------------------ View để tính toán dữ liệu ------------------------------
-- Tạo view để xem tổng số tiền từ những booking mà mỗi nhân viên đã tạo
CREATE VIEW "View_Employee_Revenue" AS
SELECT e."EmployeeID", "Name", COUNT(b."BookingID") AS "So_Booking_da_tao", SUM (b."FinalPrice") AS "Tong_tien_thu_duoc"
FROM "Employee" e
JOIN "Booking" b ON e."EmployeeID" = b."EmployeeID"
GROUP BY e."EmployeeID"
ORDER BY SUM(b."FinalPrice") DESC;

-- Tạo view để xem doanh thu của từng phim theo từng phim
CREATE VIEW "View_Film_Sales"
AS
SELECT mv."MovieID", mv."Title", SUM(b."FinalPrice") AS "Doanh_thu"
FROM "Booking" b
JOIN "Showtime" s ON s."ShowtimeID" = b."ShowtimeID"
JOIN "ShowtimeSeat" ss ON ss."ShowtimeID" = s."ShowtimeID"
JOIN "Ticket" tk ON tk."ShowtimeSeatID" = ss."ShowtimeSeatID"
JOIN "Movie" mv ON mv."MovieID" = s."MovieID"
GROUP BY mv."MovieID", mv."Title";

-- Tạo view để xem top phim bán chạy nhất
CREATE VIEW "Top_Famous_Movies" 
AS
SELECT mv."MovieID", mv."Title", COUNT(t."TicketID") AS "So_Ve_Da_Ban"
FROM "Movie" mv
JOIN "Showtime" s ON mv."MovieID" = s."MovieID"
JOIN "ShowtimeSeat" ss ON s."ShowtimeID" = ss."ShowtimeID"
JOIN "Ticket" t ON ss."ShowtimeSeatID" = t."ShowtimeSeatID"
WHERE mv."Published" = TRUE
GROUP BY mv."MovieID", mv."Title"
ORDER BY COUNT(t."TicketID") DESC;

-- Tạo view để xem top ghế ngồi được book nhiều nhất
CREATE VIEW "Top_Famous_Seats" AS
SELECT ss."SeatID", ss."SeatNumber", COUNT(b."BookingID") AS "SoLanDuocDat"
FROM "ShowtimeSeat" ss
JOIN "Ticket" t ON ss."ShowtimeSeatID" = t."ShowtimeSeatID"
JOIN "Booking" b ON t."BookingID" = b."BookingID"
GROUP BY ss."SeatID", ss."SeatNumber"
ORDER BY COUNT(b."BookingID") DESC;

---------------------------------------- X. MÃ HÓA ----------------------------------------
CREATE EXTENSION IF NOT EXISTS pgcrypto;

ALTER TABLE "Employee" ADD COLUMN "salt" varchar NOT NULL DEFAULT 'foo';
ALTER TABLE "Employee" ALTER COLUMN "salt" DROP DEFAULT;
ALTER TABLE "Employee" DROP COLUMN salt RESTRICT;

CREATE OR REPLACE FUNCTION Password_hash
(
    p_password varchar,
    p_salt varchar 
)
RETURNS varchar
AS $$
BEGIN
    RETURN crypt(p_password, p_salt);
END;
$$ LANGUAGE plpgsql;

-- Procedure để thêm "Employee"
CREATE OR REPLACE PROCEDURE AddEmployee(
    IN p_Username VARCHAR,
    IN p_Password VARCHAR,
    IN p_Name VARCHAR(255),
    IN p_Birthdate DATE,
    IN p_Gender gender,
    IN p_Address VARCHAR(255),
    IN p_PhoneNumber VARCHAR(20),
    IN p_IdentityCard INT,
    IN p_Role role_type,
    OUT p_Success BOOLEAN,
    OUT p_Message VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
DECLARE
    salt_value VARCHAR;
BEGIN
	-- Tạo một giá trị salt mới
    salt_value := encode(gen_random_bytes(32), 'hex');
    -- Mã hóa mật khẩu với salt
    p_Password := Password_hash(p_Password, salt_value);
    -- Kiểm tra xem nhân viên đã tồn tại dựa trên số IdentityCard
    IF EXISTS (
        SELECT 1 FROM "Employee" WHERE "IdentityCard" = p_IdentityCard
    ) THEN
        p_Success := FALSE;
        p_Message := 'Số CMND đã tồn tại cho một nhân viên khác.';
        RETURN;
    END IF;

    -- Kiểm tra tính hợp lệ của vai trò
    IF p_Role NOT IN ('Employee', 'Manager') THEN
        p_Success := FALSE;
        p_Message := 'Vai trò nhân viên không hợp lệ.';
        RETURN;
    END IF;

    -- Thêm nhân viên mới vào bảng "Employee"
    BEGIN
		INSERT INTO "Employee" ("Username", "Password", "Name", "Birthdate", "Gender", "Address", "PhoneNumber", "IdentityCard", "Role", "salt")
        VALUES (p_Username, p_Password, p_Name, p_Birthdate, p_Gender, p_Address, p_PhoneNumber, p_IdentityCard, p_Role, salt_value);
        p_Success := TRUE;
        p_Message := 'Nhân viên đã được thêm thành công.';
    EXCEPTION
        WHEN OTHERS THEN
            p_Success := FALSE;
            p_Message := 'Có lỗi xảy ra khi thêm nhân viên.';
    END;
END;
$$;























